using System;
using System.Threading;
using System.Threading.Tasks;
using Elasticsearch.Net.Apis.LicenseApi;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec
// ReSharper disable once CheckNamespace
namespace Nest.Apis.LicenseApi
{
	///<summary>
	/// Logically groups all License API's together so that they may be discovered more naturally.
	/// <para>Not intended to be instantiated directly please defer to the <see cref = "IElasticClient.License"/> property
	/// on <see cref = "IElasticClient"/>.
	///</para>
	///</summary>
	public class LicenseNamespace : NamespacedClientProxy
	{
		internal LicenseNamespace(ElasticClient client): base(client)
		{
		}

		///<inheritdoc cref = "IDeleteLicenseRequest"/>
		public DeleteLicenseResponse DeleteLicense(Func<DeleteLicenseDescriptor, IDeleteLicenseRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IDeleteLicenseRequest"/>
		public Task<DeleteLicenseResponse> DeleteLicenseAsync(Func<DeleteLicenseDescriptor, IDeleteLicenseRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IDeleteLicenseRequest"/>
		public DeleteLicenseResponse DeleteLicense(IDeleteLicenseRequest request) => DoRequest<IDeleteLicenseRequest, DeleteLicenseResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IDeleteLicenseRequest"/>
		public Task<DeleteLicenseResponse> DeleteLicenseAsync(IDeleteLicenseRequest request, CancellationToken ct = default) => DoRequestAsync<IDeleteLicenseRequest, DeleteLicenseResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetLicenseRequest"/>
		public GetLicenseResponse GetLicense(Func<GetLicenseDescriptor, IGetLicenseRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetLicenseRequest"/>
		public Task<GetLicenseResponse> GetLicenseAsync(Func<GetLicenseDescriptor, IGetLicenseRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetLicenseRequest"/>
		public GetLicenseResponse GetLicense(IGetLicenseRequest request) => DoRequest<IGetLicenseRequest, GetLicenseResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetLicenseRequest"/>
		public Task<GetLicenseResponse> GetLicenseAsync(IGetLicenseRequest request, CancellationToken ct = default) => DoRequestAsync<IGetLicenseRequest, GetLicenseResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetBasicLicenseStatusRequest"/>
		public GetBasicLicenseStatusResponse GetBasicLicenseStatus(Func<GetBasicLicenseStatusDescriptor, IGetBasicLicenseStatusRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetBasicLicenseStatusRequest"/>
		public Task<GetBasicLicenseStatusResponse> GetBasicLicenseStatusAsync(Func<GetBasicLicenseStatusDescriptor, IGetBasicLicenseStatusRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetBasicLicenseStatusRequest"/>
		public GetBasicLicenseStatusResponse GetBasicLicenseStatus(IGetBasicLicenseStatusRequest request) => DoRequest<IGetBasicLicenseStatusRequest, GetBasicLicenseStatusResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetBasicLicenseStatusRequest"/>
		public Task<GetBasicLicenseStatusResponse> GetBasicLicenseStatusAsync(IGetBasicLicenseStatusRequest request, CancellationToken ct = default) => DoRequestAsync<IGetBasicLicenseStatusRequest, GetBasicLicenseStatusResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetTrialLicenseStatusRequest"/>
		public GetTrialLicenseStatusResponse GetTrialLicenseStatus(Func<GetTrialLicenseStatusDescriptor, IGetTrialLicenseStatusRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetTrialLicenseStatusRequest"/>
		public Task<GetTrialLicenseStatusResponse> GetTrialLicenseStatusAsync(Func<GetTrialLicenseStatusDescriptor, IGetTrialLicenseStatusRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetTrialLicenseStatusRequest"/>
		public GetTrialLicenseStatusResponse GetTrialLicenseStatus(IGetTrialLicenseStatusRequest request) => DoRequest<IGetTrialLicenseStatusRequest, GetTrialLicenseStatusResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetTrialLicenseStatusRequest"/>
		public Task<GetTrialLicenseStatusResponse> GetTrialLicenseStatusAsync(IGetTrialLicenseStatusRequest request, CancellationToken ct = default) => DoRequestAsync<IGetTrialLicenseStatusRequest, GetTrialLicenseStatusResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IPostLicenseRequest"/>
		public PostLicenseResponse PostLicense(Func<PostLicenseDescriptor, IPostLicenseRequest> selector) => throw new NotImplementedException();
		///<inheritdoc cref = "IPostLicenseRequest"/>
		public Task<PostLicenseResponse> PostLicenseAsync(Func<PostLicenseDescriptor, IPostLicenseRequest> selector, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IPostLicenseRequest"/>
		public PostLicenseResponse PostLicense(IPostLicenseRequest request) => DoRequest<IPostLicenseRequest, PostLicenseResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IPostLicenseRequest"/>
		public Task<PostLicenseResponse> PostLicenseAsync(IPostLicenseRequest request, CancellationToken ct = default) => DoRequestAsync<IPostLicenseRequest, PostLicenseResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IStartBasicLicenseRequest"/>
		public StartBasicLicenseResponse StartBasicLicense(Func<StartBasicLicenseDescriptor, IStartBasicLicenseRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartBasicLicenseRequest"/>
		public Task<StartBasicLicenseResponse> StartBasicLicenseAsync(Func<StartBasicLicenseDescriptor, IStartBasicLicenseRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartBasicLicenseRequest"/>
		public StartBasicLicenseResponse StartBasicLicense(IStartBasicLicenseRequest request) => DoRequest<IStartBasicLicenseRequest, StartBasicLicenseResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IStartBasicLicenseRequest"/>
		public Task<StartBasicLicenseResponse> StartBasicLicenseAsync(IStartBasicLicenseRequest request, CancellationToken ct = default) => DoRequestAsync<IStartBasicLicenseRequest, StartBasicLicenseResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IStartTrialLicenseRequest"/>
		public StartTrialLicenseResponse StartTrialLicense(Func<StartTrialLicenseDescriptor, IStartTrialLicenseRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartTrialLicenseRequest"/>
		public Task<StartTrialLicenseResponse> StartTrialLicenseAsync(Func<StartTrialLicenseDescriptor, IStartTrialLicenseRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartTrialLicenseRequest"/>
		public StartTrialLicenseResponse StartTrialLicense(IStartTrialLicenseRequest request) => DoRequest<IStartTrialLicenseRequest, StartTrialLicenseResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IStartTrialLicenseRequest"/>
		public Task<StartTrialLicenseResponse> StartTrialLicenseAsync(IStartTrialLicenseRequest request, CancellationToken ct = default) => DoRequestAsync<IStartTrialLicenseRequest, StartTrialLicenseResponse>(request, request.RequestParameters, ct);
	}
}