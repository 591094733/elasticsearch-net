using System;
using System.Threading;
using System.Threading.Tasks;
using Nest;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec
// ReSharper disable once CheckNamespace
namespace Nest.Apis.RollupApi
{
	///<summary>
	/// Logically groups all Rollup API's together so that they may be discovered more naturally.
	/// <para>Not intended to be instantiated directly please defer to the <see cref = "IElasticClient.Rollup"/> property
	/// on <see cref = "IElasticClient"/>.
	///</para>
	///</summary>
	public class RollupNamespace : NamespacedClientProxy
	{
		internal RollupNamespace(ElasticClient client): base(client)
		{
		}

		///<inheritdoc cref = "IDeleteRollupJobRequest"/>
		public DeleteRollupJobResponse DeleteRollupJob(Id id, Func<DeleteRollupJobDescriptor, IDeleteRollupJobRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IDeleteRollupJobRequest"/>
		public Task<DeleteRollupJobResponse> DeleteRollupJobAsync(Id id, Func<DeleteRollupJobDescriptor, IDeleteRollupJobRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IDeleteRollupJobRequest"/>
		public DeleteRollupJobResponse DeleteRollupJob(IDeleteRollupJobRequest request) => DoRequest<IDeleteRollupJobRequest, DeleteRollupJobResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IDeleteRollupJobRequest"/>
		public Task<DeleteRollupJobResponse> DeleteRollupJobAsync(IDeleteRollupJobRequest request, CancellationToken ct = default) => DoRequestAsync<IDeleteRollupJobRequest, DeleteRollupJobResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetRollupJobRequest"/>
		public GetRollupJobResponse GetRollupJob(Func<GetRollupJobDescriptor, IGetRollupJobRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupJobRequest"/>
		public Task<GetRollupJobResponse> GetRollupJobAsync(Func<GetRollupJobDescriptor, IGetRollupJobRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupJobRequest"/>
		public GetRollupJobResponse GetRollupJob(IGetRollupJobRequest request) => DoRequest<IGetRollupJobRequest, GetRollupJobResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetRollupJobRequest"/>
		public Task<GetRollupJobResponse> GetRollupJobAsync(IGetRollupJobRequest request, CancellationToken ct = default) => DoRequestAsync<IGetRollupJobRequest, GetRollupJobResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetRollupCapabilitiesRequest"/>
		public GetRollupCapabilitiesResponse GetRollupCapabilities(Func<GetRollupCapabilitiesDescriptor, IGetRollupCapabilitiesRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupCapabilitiesRequest"/>
		public Task<GetRollupCapabilitiesResponse> GetRollupCapabilitiesAsync(Func<GetRollupCapabilitiesDescriptor, IGetRollupCapabilitiesRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupCapabilitiesRequest"/>
		public GetRollupCapabilitiesResponse GetRollupCapabilities(IGetRollupCapabilitiesRequest request) => DoRequest<IGetRollupCapabilitiesRequest, GetRollupCapabilitiesResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetRollupCapabilitiesRequest"/>
		public Task<GetRollupCapabilitiesResponse> GetRollupCapabilitiesAsync(IGetRollupCapabilitiesRequest request, CancellationToken ct = default) => DoRequestAsync<IGetRollupCapabilitiesRequest, GetRollupCapabilitiesResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IGetRollupIndexCapabilitiesRequest"/>
		public GetRollupIndexCapabilitiesResponse GetRollupIndexCapabilities(IndexName index, Func<GetRollupIndexCapabilitiesDescriptor, IGetRollupIndexCapabilitiesRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupIndexCapabilitiesRequest"/>
		public Task<GetRollupIndexCapabilitiesResponse> GetRollupIndexCapabilitiesAsync(IndexName index, Func<GetRollupIndexCapabilitiesDescriptor, IGetRollupIndexCapabilitiesRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IGetRollupIndexCapabilitiesRequest"/>
		public GetRollupIndexCapabilitiesResponse GetRollupIndexCapabilities(IGetRollupIndexCapabilitiesRequest request) => DoRequest<IGetRollupIndexCapabilitiesRequest, GetRollupIndexCapabilitiesResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IGetRollupIndexCapabilitiesRequest"/>
		public Task<GetRollupIndexCapabilitiesResponse> GetRollupIndexCapabilitiesAsync(IGetRollupIndexCapabilitiesRequest request, CancellationToken ct = default) => DoRequestAsync<IGetRollupIndexCapabilitiesRequest, GetRollupIndexCapabilitiesResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "ICreateRollupJobRequest"/>
		public CreateRollupJobResponse CreateRollupJob<TDocument>(DocumentPath<TDocument> id, Func<CreateRollupJobDescriptor<TDocument>, ICreateRollupJobRequest> selector)
			where TDocument : class => throw new NotImplementedException();
		///<inheritdoc cref = "ICreateRollupJobRequest"/>
		public Task<CreateRollupJobResponse> CreateRollupJobAsync<TDocument>(DocumentPath<TDocument> id, Func<CreateRollupJobDescriptor<TDocument>, ICreateRollupJobRequest> selector, CancellationToken ct = default)
			where TDocument : class => throw new NotImplementedException();
		///<inheritdoc cref = "ICreateRollupJobRequest"/>
		public CreateRollupJobResponse CreateRollupJob(ICreateRollupJobRequest request) => DoRequest<ICreateRollupJobRequest, CreateRollupJobResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "ICreateRollupJobRequest"/>
		public Task<CreateRollupJobResponse> CreateRollupJobAsync(ICreateRollupJobRequest request, CancellationToken ct = default) => DoRequestAsync<ICreateRollupJobRequest, CreateRollupJobResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IRollupSearchRequest"/>
		public RollupSearchResponse<TDocument> Search<TDocument>(Func<RollupSearchDescriptor<TDocument>, IRollupSearchRequest> selector)
			where TDocument : class => throw new NotImplementedException();
		///<inheritdoc cref = "IRollupSearchRequest"/>
		public Task<RollupSearchResponse<TDocument>> SearchAsync<TDocument>(Func<RollupSearchDescriptor<TDocument>, IRollupSearchRequest> selector, CancellationToken ct = default)
			where TDocument : class => throw new NotImplementedException();
		///<inheritdoc cref = "IRollupSearchRequest"/>
		public RollupSearchResponse<TDocument> Search<TDocument>(IRollupSearchRequest request)
			where TDocument : class => DoRequest<IRollupSearchRequest, RollupSearchResponse<TDocument>>(request, request.RequestParameters);
		///<inheritdoc cref = "IRollupSearchRequest"/>
		public Task<RollupSearchResponse<TDocument>> SearchAsync<TDocument>(IRollupSearchRequest request, CancellationToken ct = default)
			where TDocument : class => DoRequestAsync<IRollupSearchRequest, RollupSearchResponse<TDocument>>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IStartRollupJobRequest"/>
		public StartRollupJobResponse StartRollupJob(Id id, Func<StartRollupJobDescriptor, IStartRollupJobRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartRollupJobRequest"/>
		public Task<StartRollupJobResponse> StartRollupJobAsync(Id id, Func<StartRollupJobDescriptor, IStartRollupJobRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IStartRollupJobRequest"/>
		public StartRollupJobResponse StartRollupJob(IStartRollupJobRequest request) => DoRequest<IStartRollupJobRequest, StartRollupJobResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IStartRollupJobRequest"/>
		public Task<StartRollupJobResponse> StartRollupJobAsync(IStartRollupJobRequest request, CancellationToken ct = default) => DoRequestAsync<IStartRollupJobRequest, StartRollupJobResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IStopRollupJobRequest"/>
		public StopRollupJobResponse StopRollupJob(Id id, Func<StopRollupJobDescriptor, IStopRollupJobRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IStopRollupJobRequest"/>
		public Task<StopRollupJobResponse> StopRollupJobAsync(Id id, Func<StopRollupJobDescriptor, IStopRollupJobRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IStopRollupJobRequest"/>
		public StopRollupJobResponse StopRollupJob(IStopRollupJobRequest request) => DoRequest<IStopRollupJobRequest, StopRollupJobResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IStopRollupJobRequest"/>
		public Task<StopRollupJobResponse> StopRollupJobAsync(IStopRollupJobRequest request, CancellationToken ct = default) => DoRequestAsync<IStopRollupJobRequest, StopRollupJobResponse>(request, request.RequestParameters, ct);
	}
}