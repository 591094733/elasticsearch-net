using System;
using System.Threading;
using System.Threading.Tasks;
using Elasticsearch.Net.Specification.XpackApi;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec
// ReSharper disable once CheckNamespace
namespace Nest.Specification.XpackApi
{
	///<summary>
	/// Logically groups all Xpack API's together so that they may be discovered more naturally.
	/// <para>Not intended to be instantiated directly please defer to the <see cref = "IElasticClient.Xpack"/> property
	/// on <see cref = "IElasticClient"/>.
	///</para>
	///</summary>
	public class XpackNamespace : NamespacedClientProxy
	{
		internal XpackNamespace(ElasticClient client): base(client)
		{
		}

		///<inheritdoc cref = "IXPackInfoRequest"/>
		public XPackInfoResponse XPackInfo(Func<XPackInfoDescriptor, IXPackInfoRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IXPackInfoRequest"/>
		public Task<XPackInfoResponse> XPackInfoAsync(Func<XPackInfoDescriptor, IXPackInfoRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IXPackInfoRequest"/>
		public XPackInfoResponse XPackInfo(IXPackInfoRequest request) => DoRequest<IXPackInfoRequest, XPackInfoResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IXPackInfoRequest"/>
		public Task<XPackInfoResponse> XPackInfoAsync(IXPackInfoRequest request, CancellationToken ct = default) => DoRequestAsync<IXPackInfoRequest, XPackInfoResponse>(request, request.RequestParameters, ct);
		///<inheritdoc cref = "IXPackUsageRequest"/>
		public XPackUsageResponse XPackUsage(Func<XPackUsageDescriptor, IXPackUsageRequest> selector = null) => throw new NotImplementedException();
		///<inheritdoc cref = "IXPackUsageRequest"/>
		public Task<XPackUsageResponse> XPackUsageAsync(Func<XPackUsageDescriptor, IXPackUsageRequest> selector = null, CancellationToken ct = default) => throw new NotImplementedException();
		///<inheritdoc cref = "IXPackUsageRequest"/>
		public XPackUsageResponse XPackUsage(IXPackUsageRequest request) => DoRequest<IXPackUsageRequest, XPackUsageResponse>(request, request.RequestParameters);
		///<inheritdoc cref = "IXPackUsageRequest"/>
		public Task<XPackUsageResponse> XPackUsageAsync(IXPackUsageRequest request, CancellationToken ct = default) => DoRequestAsync<IXPackUsageRequest, XPackUsageResponse>(request, request.RequestParameters, ct);
	}
}