using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Elasticsearch.Net;
using static Elasticsearch.Net.HttpMethod;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec

namespace Nest
{
	///<summary>This dispatches highlevel requests into the proper lowlevel client overload method</summary>
	internal partial class LowLevelDispatch
	{

		internal TResponse BulkDispatch<TResponse>(IRequest<BulkRequestParameters> p,SerializableData<IBulkRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Bulk<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Bulk<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Bulk<TResponse>(body,p.RequestParameters);
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.BulkPut<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.BulkPut<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.BulkPut<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Bulk", p, new [] { POST, PUT }, "/_bulk", "/{index}/_bulk", "/{index}/{type}/_bulk");
		}
		
		internal Task<TResponse> BulkDispatchAsync<TResponse>(IRequest<BulkRequestParameters> p,SerializableData<IBulkRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.BulkAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.BulkAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.BulkAsync<TResponse>(body,p.RequestParameters,ct);
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.BulkPutAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.BulkPutAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.BulkPutAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Bulk", p, new [] { POST, PUT }, "/_bulk", "/{index}/_bulk", "/{index}/{type}/_bulk");
		}
		
		internal TResponse CatAliasesDispatch<TResponse>(IRequest<CatAliasesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.CatAliases<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.CatAliases<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatAliases", p, new [] { GET }, "/_cat/aliases", "/_cat/aliases/{name}");
		}
		
		internal Task<TResponse> CatAliasesDispatchAsync<TResponse>(IRequest<CatAliasesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.CatAliasesAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.CatAliasesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatAliases", p, new [] { GET }, "/_cat/aliases", "/_cat/aliases/{name}");
		}
		
		internal TResponse CatAllocationDispatch<TResponse>(IRequest<CatAllocationRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.CatAllocation<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
						return _lowLevel.CatAllocation<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatAllocation", p, new [] { GET }, "/_cat/allocation", "/_cat/allocation/{node_id}");
		}
		
		internal Task<TResponse> CatAllocationDispatchAsync<TResponse>(IRequest<CatAllocationRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.CatAllocationAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
						return _lowLevel.CatAllocationAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatAllocation", p, new [] { GET }, "/_cat/allocation", "/_cat/allocation/{node_id}");
		}
		
		internal TResponse CatCountDispatch<TResponse>(IRequest<CatCountRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatCount<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CatCount<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatCount", p, new [] { GET }, "/_cat/count", "/_cat/count/{index}");
		}
		
		internal Task<TResponse> CatCountDispatchAsync<TResponse>(IRequest<CatCountRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatCountAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CatCountAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatCount", p, new [] { GET }, "/_cat/count", "/_cat/count/{index}");
		}
		
		internal TResponse CatFielddataDispatch<TResponse>(IRequest<CatFielddataRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Fields)) return _lowLevel.CatFielddata<TResponse>(p.RouteValues.Fields,p.RequestParameters);
						return _lowLevel.CatFielddata<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatFielddata", p, new [] { GET }, "/_cat/fielddata", "/_cat/fielddata/{fields}");
		}
		
		internal Task<TResponse> CatFielddataDispatchAsync<TResponse>(IRequest<CatFielddataRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Fields)) return _lowLevel.CatFielddataAsync<TResponse>(p.RouteValues.Fields,p.RequestParameters,ct);
						return _lowLevel.CatFielddataAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatFielddata", p, new [] { GET }, "/_cat/fielddata", "/_cat/fielddata/{fields}");
		}
		
		internal TResponse CatHealthDispatch<TResponse>(IRequest<CatHealthRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatHealth<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatHealth", p, new [] { GET }, "/_cat/health");
		}
		
		internal Task<TResponse> CatHealthDispatchAsync<TResponse>(IRequest<CatHealthRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatHealthAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatHealth", p, new [] { GET }, "/_cat/health");
		}
		
		internal TResponse CatHelpDispatch<TResponse>(IRequest<CatHelpRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatHelp<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatHelp", p, new [] { GET }, "/_cat");
		}
		
		internal Task<TResponse> CatHelpDispatchAsync<TResponse>(IRequest<CatHelpRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatHelpAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatHelp", p, new [] { GET }, "/_cat");
		}
		
		internal TResponse CatIndicesDispatch<TResponse>(IRequest<CatIndicesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatIndices<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CatIndices<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatIndices", p, new [] { GET }, "/_cat/indices", "/_cat/indices/{index}");
		}
		
		internal Task<TResponse> CatIndicesDispatchAsync<TResponse>(IRequest<CatIndicesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatIndicesAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CatIndicesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatIndices", p, new [] { GET }, "/_cat/indices", "/_cat/indices/{index}");
		}
		
		internal TResponse CatMasterDispatch<TResponse>(IRequest<CatMasterRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatMaster<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatMaster", p, new [] { GET }, "/_cat/master");
		}
		
		internal Task<TResponse> CatMasterDispatchAsync<TResponse>(IRequest<CatMasterRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatMasterAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatMaster", p, new [] { GET }, "/_cat/master");
		}
		
		internal TResponse CatNodeattrsDispatch<TResponse>(IRequest<CatNodeAttributesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatNodeattrs<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatNodeattrs", p, new [] { GET }, "/_cat/nodeattrs");
		}
		
		internal Task<TResponse> CatNodeattrsDispatchAsync<TResponse>(IRequest<CatNodeAttributesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatNodeattrsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatNodeattrs", p, new [] { GET }, "/_cat/nodeattrs");
		}
		
		internal TResponse CatNodesDispatch<TResponse>(IRequest<CatNodesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatNodes<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatNodes", p, new [] { GET }, "/_cat/nodes");
		}
		
		internal Task<TResponse> CatNodesDispatchAsync<TResponse>(IRequest<CatNodesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatNodesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatNodes", p, new [] { GET }, "/_cat/nodes");
		}
		
		internal TResponse CatPendingTasksDispatch<TResponse>(IRequest<CatPendingTasksRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatPendingTasks<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatPendingTasks", p, new [] { GET }, "/_cat/pending_tasks");
		}
		
		internal Task<TResponse> CatPendingTasksDispatchAsync<TResponse>(IRequest<CatPendingTasksRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatPendingTasksAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatPendingTasks", p, new [] { GET }, "/_cat/pending_tasks");
		}
		
		internal TResponse CatPluginsDispatch<TResponse>(IRequest<CatPluginsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatPlugins<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatPlugins", p, new [] { GET }, "/_cat/plugins");
		}
		
		internal Task<TResponse> CatPluginsDispatchAsync<TResponse>(IRequest<CatPluginsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatPluginsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatPlugins", p, new [] { GET }, "/_cat/plugins");
		}
		
		internal TResponse CatRecoveryDispatch<TResponse>(IRequest<CatRecoveryRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatRecovery<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CatRecovery<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatRecovery", p, new [] { GET }, "/_cat/recovery", "/_cat/recovery/{index}");
		}
		
		internal Task<TResponse> CatRecoveryDispatchAsync<TResponse>(IRequest<CatRecoveryRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatRecoveryAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CatRecoveryAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatRecovery", p, new [] { GET }, "/_cat/recovery", "/_cat/recovery/{index}");
		}
		
		internal TResponse CatRepositoriesDispatch<TResponse>(IRequest<CatRepositoriesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatRepositories<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatRepositories", p, new [] { GET }, "/_cat/repositories");
		}
		
		internal Task<TResponse> CatRepositoriesDispatchAsync<TResponse>(IRequest<CatRepositoriesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatRepositoriesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatRepositories", p, new [] { GET }, "/_cat/repositories");
		}
		
		internal TResponse CatSegmentsDispatch<TResponse>(IRequest<CatSegmentsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatSegments<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CatSegments<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatSegments", p, new [] { GET }, "/_cat/segments", "/_cat/segments/{index}");
		}
		
		internal Task<TResponse> CatSegmentsDispatchAsync<TResponse>(IRequest<CatSegmentsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatSegmentsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CatSegmentsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatSegments", p, new [] { GET }, "/_cat/segments", "/_cat/segments/{index}");
		}
		
		internal TResponse CatShardsDispatch<TResponse>(IRequest<CatShardsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatShards<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CatShards<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatShards", p, new [] { GET }, "/_cat/shards", "/_cat/shards/{index}");
		}
		
		internal Task<TResponse> CatShardsDispatchAsync<TResponse>(IRequest<CatShardsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CatShardsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CatShardsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatShards", p, new [] { GET }, "/_cat/shards", "/_cat/shards/{index}");
		}
		
		internal TResponse CatSnapshotsDispatch<TResponse>(IRequest<CatSnapshotsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.CatSnapshots<TResponse>(p.RouteValues.Repository,p.RequestParameters);
						return _lowLevel.CatSnapshots<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatSnapshots", p, new [] { GET }, "/_cat/snapshots", "/_cat/snapshots/{repository}");
		}
		
		internal Task<TResponse> CatSnapshotsDispatchAsync<TResponse>(IRequest<CatSnapshotsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.CatSnapshotsAsync<TResponse>(p.RouteValues.Repository,p.RequestParameters,ct);
						return _lowLevel.CatSnapshotsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatSnapshots", p, new [] { GET }, "/_cat/snapshots", "/_cat/snapshots/{repository}");
		}
		
		internal TResponse CatTasksDispatch<TResponse>(IRequest<CatTasksRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatTasks<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatTasks", p, new [] { GET }, "/_cat/tasks");
		}
		
		internal Task<TResponse> CatTasksDispatchAsync<TResponse>(IRequest<CatTasksRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.CatTasksAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatTasks", p, new [] { GET }, "/_cat/tasks");
		}
		
		internal TResponse CatTemplatesDispatch<TResponse>(IRequest<CatTemplatesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.CatTemplates<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.CatTemplates<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatTemplates", p, new [] { GET }, "/_cat/templates", "/_cat/templates/{name}");
		}
		
		internal Task<TResponse> CatTemplatesDispatchAsync<TResponse>(IRequest<CatTemplatesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.CatTemplatesAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.CatTemplatesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatTemplates", p, new [] { GET }, "/_cat/templates", "/_cat/templates/{name}");
		}
		
		internal TResponse CatThreadPoolDispatch<TResponse>(IRequest<CatThreadPoolRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.ThreadPoolPatterns)) return _lowLevel.CatThreadPool<TResponse>(p.RouteValues.ThreadPoolPatterns,p.RequestParameters);
						return _lowLevel.CatThreadPool<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("CatThreadPool", p, new [] { GET }, "/_cat/thread_pool", "/_cat/thread_pool/{thread_pool_patterns}");
		}
		
		internal Task<TResponse> CatThreadPoolDispatchAsync<TResponse>(IRequest<CatThreadPoolRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.ThreadPoolPatterns)) return _lowLevel.CatThreadPoolAsync<TResponse>(p.RouteValues.ThreadPoolPatterns,p.RequestParameters,ct);
						return _lowLevel.CatThreadPoolAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("CatThreadPool", p, new [] { GET }, "/_cat/thread_pool", "/_cat/thread_pool/{thread_pool_patterns}");
		}
		
		internal TResponse ClearScrollDispatch<TResponse>(IRequest<ClearScrollRequestParameters> p,SerializableData<IClearScrollRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.ClearScroll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("ClearScroll", p, new [] { DELETE }, "/_search/scroll");
		}
		
		internal Task<TResponse> ClearScrollDispatchAsync<TResponse>(IRequest<ClearScrollRequestParameters> p,SerializableData<IClearScrollRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.ClearScrollAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClearScroll", p, new [] { DELETE }, "/_search/scroll");
		}
		
		internal TResponse ClusterAllocationExplainDispatch<TResponse>(IRequest<ClusterAllocationExplainRequestParameters> p,SerializableData<IClusterAllocationExplainRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterAllocationExplainGet<TResponse>(p.RequestParameters);
				case POST:
						return _lowLevel.ClusterAllocationExplain<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("ClusterAllocationExplain", p, new [] { GET, POST }, "/_cluster/allocation/explain");
		}
		
		internal Task<TResponse> ClusterAllocationExplainDispatchAsync<TResponse>(IRequest<ClusterAllocationExplainRequestParameters> p,SerializableData<IClusterAllocationExplainRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterAllocationExplainGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
						return _lowLevel.ClusterAllocationExplainAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterAllocationExplain", p, new [] { GET, POST }, "/_cluster/allocation/explain");
		}
		
		internal TResponse ClusterGetSettingsDispatch<TResponse>(IRequest<ClusterGetSettingsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterGetSettings<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterGetSettings", p, new [] { GET }, "/_cluster/settings");
		}
		
		internal Task<TResponse> ClusterGetSettingsDispatchAsync<TResponse>(IRequest<ClusterGetSettingsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterGetSettingsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterGetSettings", p, new [] { GET }, "/_cluster/settings");
		}
		
		internal TResponse ClusterHealthDispatch<TResponse>(IRequest<ClusterHealthRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.ClusterHealth<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.ClusterHealth<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterHealth", p, new [] { GET }, "/_cluster/health", "/_cluster/health/{index}");
		}
		
		internal Task<TResponse> ClusterHealthDispatchAsync<TResponse>(IRequest<ClusterHealthRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.ClusterHealthAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.ClusterHealthAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterHealth", p, new [] { GET }, "/_cluster/health", "/_cluster/health/{index}");
		}
		
		internal TResponse ClusterPendingTasksDispatch<TResponse>(IRequest<ClusterPendingTasksRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterPendingTasks<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterPendingTasks", p, new [] { GET }, "/_cluster/pending_tasks");
		}
		
		internal Task<TResponse> ClusterPendingTasksDispatchAsync<TResponse>(IRequest<ClusterPendingTasksRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterPendingTasksAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterPendingTasks", p, new [] { GET }, "/_cluster/pending_tasks");
		}
		
		internal TResponse ClusterPutSettingsDispatch<TResponse>(IRequest<ClusterPutSettingsRequestParameters> p,SerializableData<IClusterPutSettingsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.ClusterPutSettings<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("ClusterPutSettings", p, new [] { PUT }, "/_cluster/settings");
		}
		
		internal Task<TResponse> ClusterPutSettingsDispatchAsync<TResponse>(IRequest<ClusterPutSettingsRequestParameters> p,SerializableData<IClusterPutSettingsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.ClusterPutSettingsAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterPutSettings", p, new [] { PUT }, "/_cluster/settings");
		}
		
		internal TResponse ClusterRemoteInfoDispatch<TResponse>(IRequest<RemoteInfoRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterRemoteInfo<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterRemoteInfo", p, new [] { GET }, "/_remote/info");
		}
		
		internal Task<TResponse> ClusterRemoteInfoDispatchAsync<TResponse>(IRequest<RemoteInfoRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ClusterRemoteInfoAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterRemoteInfo", p, new [] { GET }, "/_remote/info");
		}
		
		internal TResponse ClusterRerouteDispatch<TResponse>(IRequest<ClusterRerouteRequestParameters> p,SerializableData<IClusterRerouteRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.ClusterReroute<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("ClusterReroute", p, new [] { POST }, "/_cluster/reroute");
		}
		
		internal Task<TResponse> ClusterRerouteDispatchAsync<TResponse>(IRequest<ClusterRerouteRequestParameters> p,SerializableData<IClusterRerouteRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.ClusterRerouteAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterReroute", p, new [] { POST }, "/_cluster/reroute");
		}
		
		internal TResponse ClusterStateDispatch<TResponse>(IRequest<ClusterStateRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Metric, p.RouteValues.Index)) return _lowLevel.ClusterState<TResponse>(p.RouteValues.Metric,p.RouteValues.Index,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.ClusterState<TResponse>(p.RouteValues.Metric,p.RequestParameters);
						return _lowLevel.ClusterState<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterState", p, new [] { GET }, "/_cluster/state", "/_cluster/state/{metric}", "/_cluster/state/{metric}/{index}");
		}
		
		internal Task<TResponse> ClusterStateDispatchAsync<TResponse>(IRequest<ClusterStateRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Metric, p.RouteValues.Index)) return _lowLevel.ClusterStateAsync<TResponse>(p.RouteValues.Metric,p.RouteValues.Index,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.ClusterStateAsync<TResponse>(p.RouteValues.Metric,p.RequestParameters,ct);
						return _lowLevel.ClusterStateAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterState", p, new [] { GET }, "/_cluster/state", "/_cluster/state/{metric}", "/_cluster/state/{metric}/{index}");
		}
		
		internal TResponse ClusterStatsDispatch<TResponse>(IRequest<ClusterStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.ClusterStats<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
						return _lowLevel.ClusterStats<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("ClusterStats", p, new [] { GET }, "/_cluster/stats", "/_cluster/stats/nodes/{node_id}");
		}
		
		internal Task<TResponse> ClusterStatsDispatchAsync<TResponse>(IRequest<ClusterStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.ClusterStatsAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
						return _lowLevel.ClusterStatsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("ClusterStats", p, new [] { GET }, "/_cluster/stats", "/_cluster/stats/nodes/{node_id}");
		}
		
		internal TResponse CountDispatch<TResponse>(IRequest<CountRequestParameters> p,SerializableData<ICountRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Count<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Count<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Count<TResponse>(body,p.RequestParameters);
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.CountGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CountGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.CountGet<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("Count", p, new [] { POST, GET }, "/_count", "/{index}/_count", "/{index}/{type}/_count");
		}
		
		internal Task<TResponse> CountDispatchAsync<TResponse>(IRequest<CountRequestParameters> p,SerializableData<ICountRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.CountAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CountAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.CountAsync<TResponse>(body,p.RequestParameters,ct);
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.CountGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.CountGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.CountGetAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("Count", p, new [] { POST, GET }, "/_count", "/{index}/_count", "/{index}/{type}/_count");
		}
		
		internal TResponse CreateDispatch<TResponse,TDocument>(IRequest<CreateRequestParameters> p,SerializableData<ICreateRequest<TDocument>> body) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Create<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Create<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.CreatePost<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.CreatePost<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Create", p, new [] { PUT, POST }, "/{index}/_create/{id}", "/{index}/{type}/{id}/_create");
		}
		
		internal Task<TResponse> CreateDispatchAsync<TResponse,TDocument>(IRequest<CreateRequestParameters> p,SerializableData<ICreateRequest<TDocument>> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.CreateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.CreateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.CreatePostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.CreatePostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Create", p, new [] { PUT, POST }, "/{index}/_create/{id}", "/{index}/{type}/{id}/_create");
		}
		
		internal TResponse DeleteDispatch<TResponse>(IRequest<DeleteRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Delete<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Delete<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Delete", p, new [] { DELETE }, "/{index}/{type}/{id}", "/{index}/_doc/{id}");
		}
		
		internal Task<TResponse> DeleteDispatchAsync<TResponse>(IRequest<DeleteRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.DeleteAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.DeleteAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Delete", p, new [] { DELETE }, "/{index}/{type}/{id}", "/{index}/_doc/{id}");
		}
		
		internal TResponse DeleteByQueryDispatch<TResponse>(IRequest<DeleteByQueryRequestParameters> p,SerializableData<IDeleteByQueryRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.DeleteByQuery<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.DeleteByQuery<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("DeleteByQuery", p, new [] { POST }, "/{index}/_delete_by_query", "/{index}/{type}/_delete_by_query");
		}
		
		internal Task<TResponse> DeleteByQueryDispatchAsync<TResponse>(IRequest<DeleteByQueryRequestParameters> p,SerializableData<IDeleteByQueryRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.DeleteByQueryAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.DeleteByQueryAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("DeleteByQuery", p, new [] { POST }, "/{index}/_delete_by_query", "/{index}/{type}/_delete_by_query");
		}
		
		internal TResponse DeleteScriptDispatch<TResponse>(IRequest<DeleteScriptRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.DeleteScript<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("DeleteScript", p, new [] { DELETE }, "/_scripts/{id}");
		}
		
		internal Task<TResponse> DeleteScriptDispatchAsync<TResponse>(IRequest<DeleteScriptRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.DeleteScriptAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("DeleteScript", p, new [] { DELETE }, "/_scripts/{id}");
		}
		
		internal TResponse ExistsDispatch<TResponse>(IRequest<DocumentExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Exists<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Exists<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Exists", p, new [] { HEAD }, "/{index}/_doc/{id}", "/{index}/{type}/{id}");
		}
		
		internal Task<TResponse> ExistsDispatchAsync<TResponse>(IRequest<DocumentExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExistsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExistsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Exists", p, new [] { HEAD }, "/{index}/_doc/{id}", "/{index}/{type}/{id}");
		}
		
		internal TResponse ExistsSourceDispatch<TResponse>(IRequest<SourceExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExistsSource<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExistsSource<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("ExistsSource", p, new [] { HEAD }, "/{index}/_source/{id}", "/{index}/{type}/{id}/_source");
		}
		
		internal Task<TResponse> ExistsSourceDispatchAsync<TResponse>(IRequest<SourceExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExistsSourceAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExistsSourceAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("ExistsSource", p, new [] { HEAD }, "/{index}/_source/{id}", "/{index}/{type}/{id}/_source");
		}
		
		internal TResponse ExplainDispatch<TResponse,TDocument>(IRequest<ExplainRequestParameters> p,SerializableData<IExplainRequest<TDocument>> body) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExplainGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExplainGet<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Explain<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Explain<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Explain", p, new [] { GET, POST }, "/{index}/_explain/{id}", "/{index}/{type}/{id}/_explain");
		}
		
		internal Task<TResponse> ExplainDispatchAsync<TResponse,TDocument>(IRequest<ExplainRequestParameters> p,SerializableData<IExplainRequest<TDocument>> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExplainGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExplainGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.ExplainAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.ExplainAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Explain", p, new [] { GET, POST }, "/{index}/_explain/{id}", "/{index}/{type}/{id}/_explain");
		}
		
		internal TResponse FieldCapsDispatch<TResponse>(IRequest<FieldCapabilitiesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.FieldCapsGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.FieldCapsGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.FieldCaps<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.FieldCaps<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("FieldCaps", p, new [] { GET, POST }, "/_field_caps", "/{index}/_field_caps");
		}
		
		internal Task<TResponse> FieldCapsDispatchAsync<TResponse>(IRequest<FieldCapabilitiesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.FieldCapsGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.FieldCapsGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.FieldCapsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.FieldCapsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("FieldCaps", p, new [] { GET, POST }, "/_field_caps", "/{index}/_field_caps");
		}
		
		internal TResponse GetDispatch<TResponse>(IRequest<GetRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Get<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Get<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Get", p, new [] { GET }, "/{index}/_doc/{id}", "/{index}/{type}/{id}");
		}
		
		internal Task<TResponse> GetDispatchAsync<TResponse>(IRequest<GetRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.GetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.GetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Get", p, new [] { GET }, "/{index}/_doc/{id}", "/{index}/{type}/{id}");
		}
		
		internal TResponse GetScriptDispatch<TResponse>(IRequest<GetScriptRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.GetScript<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("GetScript", p, new [] { GET }, "/_scripts/{id}");
		}
		
		internal Task<TResponse> GetScriptDispatchAsync<TResponse>(IRequest<GetScriptRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.GetScriptAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("GetScript", p, new [] { GET }, "/_scripts/{id}");
		}
		
		internal TResponse GetSourceDispatch<TResponse>(IRequest<SourceRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.GetSource<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.GetSource<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("GetSource", p, new [] { GET }, "/{index}/_source/{id}", "/{index}/{type}/{id}/_source");
		}
		
		internal Task<TResponse> GetSourceDispatchAsync<TResponse>(IRequest<SourceRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.GetSourceAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.GetSourceAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("GetSource", p, new [] { GET }, "/{index}/_source/{id}", "/{index}/{type}/{id}/_source");
		}
		
		internal TResponse IndexDispatch<TResponse,TDocument>(IRequest<IndexRequestParameters> p,SerializableData<IIndexRequest<TDocument>> body) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Index<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Index<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Index<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.Index<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.IndexPut<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndexPut<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.IndexPut<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndexPut<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Index", p, new [] { POST, PUT }, "/{index}/{type}", "/{index}/{type}/{id}", "/{index}/_doc/{id}", "/{index}/_doc");
		}
		
		internal Task<TResponse> IndexDispatchAsync<TResponse,TDocument>(IRequest<IndexRequestParameters> p,SerializableData<IIndexRequest<TDocument>> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.IndexAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndexAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.IndexAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndexAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.IndexPutAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndexPutAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.IndexPutAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndexPutAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Index", p, new [] { POST, PUT }, "/{index}/{type}", "/{index}/{type}/{id}", "/{index}/_doc/{id}", "/{index}/_doc");
		}
		
		internal TResponse IndicesAnalyzeDispatch<TResponse>(IRequest<AnalyzeRequestParameters> p,SerializableData<IAnalyzeRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesAnalyzeGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesAnalyzeGetForAll<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesAnalyze<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.IndicesAnalyzeForAll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("IndicesAnalyze", p, new [] { GET, POST }, "/_analyze", "/{index}/_analyze");
		}
		
		internal Task<TResponse> IndicesAnalyzeDispatchAsync<TResponse>(IRequest<AnalyzeRequestParameters> p,SerializableData<IAnalyzeRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesAnalyzeGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesAnalyzeGetForAllAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesAnalyzeAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.IndicesAnalyzeForAllAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesAnalyze", p, new [] { GET, POST }, "/_analyze", "/{index}/_analyze");
		}
		
		internal TResponse IndicesClearCacheDispatch<TResponse>(IRequest<ClearCacheRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesClearCache<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesClearCacheForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesClearCache", p, new [] { POST }, "/_cache/clear", "/{index}/_cache/clear");
		}
		
		internal Task<TResponse> IndicesClearCacheDispatchAsync<TResponse>(IRequest<ClearCacheRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesClearCacheAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesClearCacheForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesClearCache", p, new [] { POST }, "/_cache/clear", "/{index}/_cache/clear");
		}
		
		internal TResponse IndicesCloseDispatch<TResponse>(IRequest<CloseIndexRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesClose<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesClose", p, new [] { POST }, "/{index}/_close");
		}
		
		internal Task<TResponse> IndicesCloseDispatchAsync<TResponse>(IRequest<CloseIndexRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesCloseAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesClose", p, new [] { POST }, "/{index}/_close");
		}
		
		internal TResponse IndicesCreateDispatch<TResponse>(IRequest<CreateIndexRequestParameters> p,SerializableData<ICreateIndexRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesCreate<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesCreate", p, new [] { PUT }, "/{index}");
		}
		
		internal Task<TResponse> IndicesCreateDispatchAsync<TResponse>(IRequest<CreateIndexRequestParameters> p,SerializableData<ICreateIndexRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesCreateAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesCreate", p, new [] { PUT }, "/{index}");
		}
		
		internal TResponse IndicesDeleteDispatch<TResponse>(IRequest<DeleteIndexRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesDelete<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesDelete", p, new [] { DELETE }, "/{index}");
		}
		
		internal Task<TResponse> IndicesDeleteDispatchAsync<TResponse>(IRequest<DeleteIndexRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesDeleteAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesDelete", p, new [] { DELETE }, "/{index}");
		}
		
		internal TResponse IndicesDeleteAliasDispatch<TResponse>(IRequest<DeleteAliasRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesDeleteAlias<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesDeleteAlias", p, new [] { DELETE }, "/{index}/_alias/{name}", "/{index}/_aliases/{name}");
		}
		
		internal Task<TResponse> IndicesDeleteAliasDispatchAsync<TResponse>(IRequest<DeleteAliasRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesDeleteAliasAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesDeleteAlias", p, new [] { DELETE }, "/{index}/_alias/{name}", "/{index}/_aliases/{name}");
		}
		
		internal TResponse IndicesDeleteTemplateDispatch<TResponse>(IRequest<DeleteIndexTemplateRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesDeleteTemplateForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesDeleteTemplate", p, new [] { DELETE }, "/_template/{name}");
		}
		
		internal Task<TResponse> IndicesDeleteTemplateDispatchAsync<TResponse>(IRequest<DeleteIndexTemplateRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesDeleteTemplateForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesDeleteTemplate", p, new [] { DELETE }, "/_template/{name}");
		}
		
		internal TResponse IndicesExistsDispatch<TResponse>(IRequest<IndexExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesExists<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesExists", p, new [] { HEAD }, "/{index}");
		}
		
		internal Task<TResponse> IndicesExistsDispatchAsync<TResponse>(IRequest<IndexExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesExistsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesExists", p, new [] { HEAD }, "/{index}");
		}
		
		internal TResponse IndicesExistsAliasDispatch<TResponse>(IRequest<AliasExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesExistsAlias<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesExistsAliasForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesExistsAlias", p, new [] { HEAD }, "/_alias/{name}", "/{index}/_alias/{name}");
		}
		
		internal Task<TResponse> IndicesExistsAliasDispatchAsync<TResponse>(IRequest<AliasExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesExistsAliasAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesExistsAliasForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesExistsAlias", p, new [] { HEAD }, "/_alias/{name}", "/{index}/_alias/{name}");
		}
		
		internal TResponse IndicesExistsTemplateDispatch<TResponse>(IRequest<IndexTemplateExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesExistsTemplateForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesExistsTemplate", p, new [] { HEAD }, "/_template/{name}");
		}
		
		internal Task<TResponse> IndicesExistsTemplateDispatchAsync<TResponse>(IRequest<IndexTemplateExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesExistsTemplateForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesExistsTemplate", p, new [] { HEAD }, "/_template/{name}");
		}
		
		internal TResponse IndicesExistsTypeDispatch<TResponse>(IRequest<TypeExistsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesExistsType<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesExistsType", p, new [] { HEAD }, "/{index}/_mapping/{type}");
		}
		
		internal Task<TResponse> IndicesExistsTypeDispatchAsync<TResponse>(IRequest<TypeExistsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesExistsTypeAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesExistsType", p, new [] { HEAD }, "/{index}/_mapping/{type}");
		}
		
		internal TResponse IndicesFlushDispatch<TResponse>(IRequest<FlushRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlush<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesFlushForAll<TResponse>(p.RequestParameters);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesFlushGetForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesFlush", p, new [] { POST, GET }, "/_flush", "/{index}/_flush");
		}
		
		internal Task<TResponse> IndicesFlushDispatchAsync<TResponse>(IRequest<FlushRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesFlushForAllAsync<TResponse>(p.RequestParameters,ct);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesFlushGetForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesFlush", p, new [] { POST, GET }, "/_flush", "/{index}/_flush");
		}
		
		internal TResponse IndicesFlushSyncedDispatch<TResponse>(IRequest<SyncedFlushRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushSynced<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesFlushSyncedForAll<TResponse>(p.RequestParameters);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushSyncedGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesFlushSyncedGetForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesFlushSynced", p, new [] { POST, GET }, "/_flush/synced", "/{index}/_flush/synced");
		}
		
		internal Task<TResponse> IndicesFlushSyncedDispatchAsync<TResponse>(IRequest<SyncedFlushRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushSyncedAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesFlushSyncedForAllAsync<TResponse>(p.RequestParameters,ct);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesFlushSyncedGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesFlushSyncedGetForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesFlushSynced", p, new [] { POST, GET }, "/_flush/synced", "/{index}/_flush/synced");
		}
		
		internal TResponse IndicesForcemergeDispatch<TResponse>(IRequest<ForceMergeRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesForcemerge<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesForcemergeForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesForcemerge", p, new [] { POST }, "/_forcemerge", "/{index}/_forcemerge");
		}
		
		internal Task<TResponse> IndicesForcemergeDispatchAsync<TResponse>(IRequest<ForceMergeRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesForcemergeAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesForcemergeForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesForcemerge", p, new [] { POST }, "/_forcemerge", "/{index}/_forcemerge");
		}
		
		internal TResponse IndicesGetDispatch<TResponse>(IRequest<GetIndexRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesGet", p, new [] { GET }, "/{index}");
		}
		
		internal Task<TResponse> IndicesGetDispatchAsync<TResponse>(IRequest<GetIndexRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesGet", p, new [] { GET }, "/{index}");
		}
		
		internal TResponse IndicesGetAliasDispatch<TResponse>(IRequest<GetAliasRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesGetAlias<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters);
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetAliasForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetAlias<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesGetAliasForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesGetAlias", p, new [] { GET }, "/_alias", "/_alias/{name}", "/{index}/_alias/{name}", "/{index}/_alias");
		}
		
		internal Task<TResponse> IndicesGetAliasDispatchAsync<TResponse>(IRequest<GetAliasRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesGetAliasAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetAliasForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetAliasAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesGetAliasForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesGetAlias", p, new [] { GET }, "/_alias", "/_alias/{name}", "/{index}/_alias/{name}", "/{index}/_alias");
		}
		
		internal TResponse IndicesGetFieldMappingDispatch<TResponse>(IRequest<GetFieldMappingRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMapping<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Fields,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMapping<TResponse>(p.RouteValues.Index,p.RouteValues.Fields,p.RequestParameters);
					if (AllSet(p.RouteValues.Type, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingForAll<TResponse>(p.RouteValues.Type,p.RouteValues.Fields,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingForAll<TResponse>(p.RouteValues.Fields,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesGetFieldMapping", p, new [] { GET }, "/_mapping/field/{fields}", "/{index}/_mapping/field/{fields}", "/_mapping/{type}/field/{fields}", "/{index}/_mapping/{type}/field/{fields}");
		}
		
		internal Task<TResponse> IndicesGetFieldMappingDispatchAsync<TResponse>(IRequest<GetFieldMappingRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Fields,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Fields,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Type, p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingForAllAsync<TResponse>(p.RouteValues.Type,p.RouteValues.Fields,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Fields)) return _lowLevel.IndicesGetFieldMappingForAllAsync<TResponse>(p.RouteValues.Fields,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesGetFieldMapping", p, new [] { GET }, "/_mapping/field/{fields}", "/{index}/_mapping/field/{fields}", "/_mapping/{type}/field/{fields}", "/{index}/_mapping/{type}/field/{fields}");
		}
		
		internal TResponse IndicesGetMappingDispatch<TResponse>(IRequest<GetMappingRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesGetMapping<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetMapping<TResponse>(p.RouteValues.Index,p.RequestParameters);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesGetMappingForAll<TResponse>(p.RouteValues.Type,p.RequestParameters);
						return _lowLevel.IndicesGetMappingForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesGetMapping", p, new [] { GET }, "/_mapping", "/{index}/_mapping", "/_mapping/{type}", "/{index}/_mapping/{type}");
		}
		
		internal Task<TResponse> IndicesGetMappingDispatchAsync<TResponse>(IRequest<GetMappingRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesGetMappingAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetMappingAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesGetMappingForAllAsync<TResponse>(p.RouteValues.Type,p.RequestParameters,ct);
						return _lowLevel.IndicesGetMappingForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesGetMapping", p, new [] { GET }, "/_mapping", "/{index}/_mapping", "/_mapping/{type}", "/{index}/_mapping/{type}");
		}
		
		internal TResponse IndicesGetSettingsDispatch<TResponse>(IRequest<GetIndexSettingsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesGetSettings<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetSettings<TResponse>(p.RouteValues.Index,p.RequestParameters);
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetSettingsForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.IndicesGetSettingsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesGetSettings", p, new [] { GET }, "/_settings", "/{index}/_settings", "/{index}/_settings/{name}", "/_settings/{name}");
		}
		
		internal Task<TResponse> IndicesGetSettingsDispatchAsync<TResponse>(IRequest<GetIndexSettingsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesGetSettingsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetSettingsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetSettingsForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.IndicesGetSettingsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesGetSettings", p, new [] { GET }, "/_settings", "/{index}/_settings", "/{index}/_settings/{name}", "/_settings/{name}");
		}
		
		internal TResponse IndicesGetTemplateDispatch<TResponse>(IRequest<GetIndexTemplateRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetTemplateForAll<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.IndicesGetTemplateForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesGetTemplate", p, new [] { GET }, "/_template", "/_template/{name}");
		}
		
		internal Task<TResponse> IndicesGetTemplateDispatchAsync<TResponse>(IRequest<GetIndexTemplateRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.IndicesGetTemplateForAllAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.IndicesGetTemplateForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesGetTemplate", p, new [] { GET }, "/_template", "/_template/{name}");
		}
		
		internal TResponse IndicesGetUpgradeDispatch<TResponse>(IRequest<UpgradeStatusRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetUpgrade<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesGetUpgradeForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesGetUpgrade", p, new [] { GET }, "/_upgrade", "/{index}/_upgrade");
		}
		
		internal Task<TResponse> IndicesGetUpgradeDispatchAsync<TResponse>(IRequest<UpgradeStatusRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesGetUpgradeAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesGetUpgradeForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesGetUpgrade", p, new [] { GET }, "/_upgrade", "/{index}/_upgrade");
		}
		
		internal TResponse IndicesOpenDispatch<TResponse>(IRequest<OpenIndexRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesOpen<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesOpen", p, new [] { POST }, "/{index}/_open");
		}
		
		internal Task<TResponse> IndicesOpenDispatchAsync<TResponse>(IRequest<OpenIndexRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.IndicesOpenAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesOpen", p, new [] { POST }, "/{index}/_open");
		}
		
		internal TResponse IndicesPutAliasDispatch<TResponse>(IRequest<PutAliasRequestParameters> p,SerializableData<IPutAliasRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesPutAlias<TResponse>(p.RouteValues.Index,p.RouteValues.Name,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesPutAliasPost<TResponse>(p.RouteValues.Index,p.RouteValues.Name,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesPutAlias", p, new [] { PUT, POST }, "/{index}/_alias/{name}", "/{index}/_aliases/{name}");
		}
		
		internal Task<TResponse> IndicesPutAliasDispatchAsync<TResponse>(IRequest<PutAliasRequestParameters> p,SerializableData<IPutAliasRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesPutAliasAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Name)) return _lowLevel.IndicesPutAliasPostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesPutAlias", p, new [] { PUT, POST }, "/{index}/_alias/{name}", "/{index}/_aliases/{name}");
		}
		
		internal TResponse IndicesPutMappingDispatch<TResponse>(IRequest<PutMappingRequestParameters> p,SerializableData<IPutMappingRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesPutMapping<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesPutMappingForAll<TResponse>(p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutMapping<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesPutMappingPost<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesPutMappingPostForAll<TResponse>(p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutMappingPost<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesPutMapping", p, new [] { PUT, POST }, "/{index}/{type}/_mapping", "/{index}/_mapping/{type}", "/_mapping/{type}", "/{index}/{type}/_mappings", "/{index}/_mappings/{type}", "/_mappings/{type}", "/{index}/_mappings", "/{index}/_mapping");
		}
		
		internal Task<TResponse> IndicesPutMappingDispatchAsync<TResponse>(IRequest<PutMappingRequestParameters> p,SerializableData<IPutMappingRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesPutMappingAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesPutMappingForAllAsync<TResponse>(p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutMappingAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesPutMappingPostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Type)) return _lowLevel.IndicesPutMappingPostForAllAsync<TResponse>(p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutMappingPostAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesPutMapping", p, new [] { PUT, POST }, "/{index}/{type}/_mapping", "/{index}/_mapping/{type}", "/_mapping/{type}", "/{index}/{type}/_mappings", "/{index}/_mappings/{type}", "/_mappings/{type}", "/{index}/_mappings", "/{index}/_mapping");
		}
		
		internal TResponse IndicesPutSettingsDispatch<TResponse>(IRequest<UpdateIndexSettingsRequestParameters> p,SerializableData<IUpdateIndexSettingsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutSettings<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.IndicesPutSettingsForAll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("IndicesPutSettings", p, new [] { PUT }, "/_settings", "/{index}/_settings");
		}
		
		internal Task<TResponse> IndicesPutSettingsDispatchAsync<TResponse>(IRequest<UpdateIndexSettingsRequestParameters> p,SerializableData<IUpdateIndexSettingsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesPutSettingsAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.IndicesPutSettingsForAllAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesPutSettings", p, new [] { PUT }, "/_settings", "/{index}/_settings");
		}
		
		internal TResponse IndicesPutTemplateDispatch<TResponse>(IRequest<PutIndexTemplateRequestParameters> p,SerializableData<IPutIndexTemplateRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesPutTemplateForAll<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesPutTemplatePostForAll<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesPutTemplate", p, new [] { PUT, POST }, "/_template/{name}");
		}
		
		internal Task<TResponse> IndicesPutTemplateDispatchAsync<TResponse>(IRequest<PutIndexTemplateRequestParameters> p,SerializableData<IPutIndexTemplateRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesPutTemplateForAllAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.IndicesPutTemplatePostForAllAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesPutTemplate", p, new [] { PUT, POST }, "/_template/{name}");
		}
		
		internal TResponse IndicesRecoveryDispatch<TResponse>(IRequest<RecoveryStatusRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRecovery<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesRecoveryForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesRecovery", p, new [] { GET }, "/_recovery", "/{index}/_recovery");
		}
		
		internal Task<TResponse> IndicesRecoveryDispatchAsync<TResponse>(IRequest<RecoveryStatusRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRecoveryAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesRecoveryForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesRecovery", p, new [] { GET }, "/_recovery", "/{index}/_recovery");
		}
		
		internal TResponse IndicesRefreshDispatch<TResponse>(IRequest<RefreshRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRefresh<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesRefreshForAll<TResponse>(p.RequestParameters);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRefreshGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesRefreshGetForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesRefresh", p, new [] { POST, GET }, "/_refresh", "/{index}/_refresh");
		}
		
		internal Task<TResponse> IndicesRefreshDispatchAsync<TResponse>(IRequest<RefreshRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRefreshAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesRefreshForAllAsync<TResponse>(p.RequestParameters,ct);
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesRefreshGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesRefreshGetForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesRefresh", p, new [] { POST, GET }, "/_refresh", "/{index}/_refresh");
		}
		
		internal TResponse IndicesRolloverDispatch<TResponse>(IRequest<RolloverIndexRequestParameters> p,SerializableData<IRolloverIndexRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Alias, p.RouteValues.NewIndex)) return _lowLevel.IndicesRolloverForAll<TResponse>(p.RouteValues.Alias,p.RouteValues.NewIndex,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Alias)) return _lowLevel.IndicesRolloverForAll<TResponse>(p.RouteValues.Alias,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesRollover", p, new [] { POST }, "/{alias}/_rollover", "/{alias}/_rollover/{new_index}");
		}
		
		internal Task<TResponse> IndicesRolloverDispatchAsync<TResponse>(IRequest<RolloverIndexRequestParameters> p,SerializableData<IRolloverIndexRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Alias, p.RouteValues.NewIndex)) return _lowLevel.IndicesRolloverForAllAsync<TResponse>(p.RouteValues.Alias,p.RouteValues.NewIndex,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Alias)) return _lowLevel.IndicesRolloverForAllAsync<TResponse>(p.RouteValues.Alias,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesRollover", p, new [] { POST }, "/{alias}/_rollover", "/{alias}/_rollover/{new_index}");
		}
		
		internal TResponse IndicesSegmentsDispatch<TResponse>(IRequest<SegmentsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesSegments<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesSegmentsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesSegments", p, new [] { GET }, "/_segments", "/{index}/_segments");
		}
		
		internal Task<TResponse> IndicesSegmentsDispatchAsync<TResponse>(IRequest<SegmentsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesSegmentsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesSegmentsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesSegments", p, new [] { GET }, "/_segments", "/{index}/_segments");
		}
		
		internal TResponse IndicesShardStoresDispatch<TResponse>(IRequest<IndicesShardStoresRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesShardStores<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesShardStoresForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesShardStores", p, new [] { GET }, "/_shard_stores", "/{index}/_shard_stores");
		}
		
		internal Task<TResponse> IndicesShardStoresDispatchAsync<TResponse>(IRequest<IndicesShardStoresRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesShardStoresAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesShardStoresForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesShardStores", p, new [] { GET }, "/_shard_stores", "/{index}/_shard_stores");
		}
		
		internal TResponse IndicesShrinkDispatch<TResponse>(IRequest<ShrinkIndexRequestParameters> p,SerializableData<IShrinkIndexRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesShrink<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesShrinkPost<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesShrink", p, new [] { PUT, POST }, "/{index}/_shrink/{target}");
		}
		
		internal Task<TResponse> IndicesShrinkDispatchAsync<TResponse>(IRequest<ShrinkIndexRequestParameters> p,SerializableData<IShrinkIndexRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesShrinkAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesShrinkPostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesShrink", p, new [] { PUT, POST }, "/{index}/_shrink/{target}");
		}
		
		internal TResponse IndicesSplitDispatch<TResponse>(IRequest<SplitIndexRequestParameters> p,SerializableData<ISplitIndexRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesSplit<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesSplitPost<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IndicesSplit", p, new [] { PUT, POST }, "/{index}/_split/{target}");
		}
		
		internal Task<TResponse> IndicesSplitDispatchAsync<TResponse>(IRequest<SplitIndexRequestParameters> p,SerializableData<ISplitIndexRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesSplitAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Target)) return _lowLevel.IndicesSplitPostAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Target,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IndicesSplit", p, new [] { PUT, POST }, "/{index}/_split/{target}");
		}
		
		internal TResponse IndicesStatsDispatch<TResponse>(IRequest<IndicesStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Metric)) return _lowLevel.IndicesStats<TResponse>(p.RouteValues.Index,p.RouteValues.Metric,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.IndicesStatsForAll<TResponse>(p.RouteValues.Metric,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesStats<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesStatsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesStats", p, new [] { GET }, "/_stats", "/_stats/{metric}", "/{index}/_stats", "/{index}/_stats/{metric}");
		}
		
		internal Task<TResponse> IndicesStatsDispatchAsync<TResponse>(IRequest<IndicesStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Metric)) return _lowLevel.IndicesStatsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Metric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.IndicesStatsForAllAsync<TResponse>(p.RouteValues.Metric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesStatsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesStatsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesStats", p, new [] { GET }, "/_stats", "/_stats/{metric}", "/{index}/_stats", "/{index}/_stats/{metric}");
		}
		
		internal TResponse IndicesUpdateAliasesDispatch<TResponse>(IRequest<BulkAliasRequestParameters> p,SerializableData<IBulkAliasRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.IndicesUpdateAliasesForAll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("IndicesUpdateAliases", p, new [] { POST }, "/_aliases");
		}
		
		internal Task<TResponse> IndicesUpdateAliasesDispatchAsync<TResponse>(IRequest<BulkAliasRequestParameters> p,SerializableData<IBulkAliasRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.IndicesUpdateAliasesForAllAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesUpdateAliases", p, new [] { POST }, "/_aliases");
		}
		
		internal TResponse IndicesUpgradeDispatch<TResponse>(IRequest<UpgradeRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesUpgrade<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesUpgradeForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IndicesUpgrade", p, new [] { POST }, "/_upgrade", "/{index}/_upgrade");
		}
		
		internal Task<TResponse> IndicesUpgradeDispatchAsync<TResponse>(IRequest<UpgradeRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesUpgradeAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesUpgradeForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesUpgrade", p, new [] { POST }, "/_upgrade", "/{index}/_upgrade");
		}
		
		internal TResponse IndicesValidateQueryDispatch<TResponse>(IRequest<ValidateQueryRequestParameters> p,SerializableData<IValidateQueryRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesValidateQueryGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesValidateQueryGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.IndicesValidateQueryGetForAll<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesValidateQuery<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesValidateQuery<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.IndicesValidateQueryForAll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("IndicesValidateQuery", p, new [] { GET, POST }, "/_validate/query", "/{index}/_validate/query", "/{index}/{type}/_validate/query");
		}
		
		internal Task<TResponse> IndicesValidateQueryDispatchAsync<TResponse>(IRequest<ValidateQueryRequestParameters> p,SerializableData<IValidateQueryRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesValidateQueryGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesValidateQueryGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.IndicesValidateQueryGetForAllAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.IndicesValidateQueryAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.IndicesValidateQueryAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.IndicesValidateQueryForAllAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("IndicesValidateQuery", p, new [] { GET, POST }, "/_validate/query", "/{index}/_validate/query", "/{index}/{type}/_validate/query");
		}
		
		internal TResponse InfoDispatch<TResponse>(IRequest<RootNodeInfoRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.Info<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("Info", p, new [] { GET }, "/");
		}
		
		internal Task<TResponse> InfoDispatchAsync<TResponse>(IRequest<RootNodeInfoRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.InfoAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("Info", p, new [] { GET }, "/");
		}
		
		internal TResponse IngestDeletePipelineDispatch<TResponse>(IRequest<DeletePipelineRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.IngestDeletePipeline<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IngestDeletePipeline", p, new [] { DELETE }, "/_ingest/pipeline/{id}");
		}
		
		internal Task<TResponse> IngestDeletePipelineDispatchAsync<TResponse>(IRequest<DeletePipelineRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.IngestDeletePipelineAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IngestDeletePipeline", p, new [] { DELETE }, "/_ingest/pipeline/{id}");
		}
		
		internal TResponse IngestGetPipelineDispatch<TResponse>(IRequest<GetPipelineRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestGetPipeline<TResponse>(p.RouteValues.Id,p.RequestParameters);
						return _lowLevel.IngestGetPipeline<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IngestGetPipeline", p, new [] { GET }, "/_ingest/pipeline", "/_ingest/pipeline/{id}");
		}
		
		internal Task<TResponse> IngestGetPipelineDispatchAsync<TResponse>(IRequest<GetPipelineRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestGetPipelineAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
						return _lowLevel.IngestGetPipelineAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IngestGetPipeline", p, new [] { GET }, "/_ingest/pipeline", "/_ingest/pipeline/{id}");
		}
		
		internal TResponse IngestProcessorGrokDispatch<TResponse>(IRequest<GrokProcessorPatternsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.IngestProcessorGrok<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("IngestProcessorGrok", p, new [] { GET }, "/_ingest/processor/grok");
		}
		
		internal Task<TResponse> IngestProcessorGrokDispatchAsync<TResponse>(IRequest<GrokProcessorPatternsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.IngestProcessorGrokAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("IngestProcessorGrok", p, new [] { GET }, "/_ingest/processor/grok");
		}
		
		internal TResponse IngestPutPipelineDispatch<TResponse>(IRequest<PutPipelineRequestParameters> p,SerializableData<IPutPipelineRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.IngestPutPipeline<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("IngestPutPipeline", p, new [] { PUT }, "/_ingest/pipeline/{id}");
		}
		
		internal Task<TResponse> IngestPutPipelineDispatchAsync<TResponse>(IRequest<PutPipelineRequestParameters> p,SerializableData<IPutPipelineRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.IngestPutPipelineAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("IngestPutPipeline", p, new [] { PUT }, "/_ingest/pipeline/{id}");
		}
		
		internal TResponse IngestSimulateDispatch<TResponse>(IRequest<SimulatePipelineRequestParameters> p,SerializableData<ISimulatePipelineRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestSimulateGet<TResponse>(p.RouteValues.Id,p.RequestParameters);
						return _lowLevel.IngestSimulateGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestSimulate<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
						return _lowLevel.IngestSimulate<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("IngestSimulate", p, new [] { GET, POST }, "/_ingest/pipeline/_simulate", "/_ingest/pipeline/{id}/_simulate");
		}
		
		internal Task<TResponse> IngestSimulateDispatchAsync<TResponse>(IRequest<SimulatePipelineRequestParameters> p,SerializableData<ISimulatePipelineRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestSimulateGetAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
						return _lowLevel.IngestSimulateGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.IngestSimulateAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
						return _lowLevel.IngestSimulateAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("IngestSimulate", p, new [] { GET, POST }, "/_ingest/pipeline/_simulate", "/_ingest/pipeline/{id}/_simulate");
		}
		
		internal TResponse MgetDispatch<TResponse>(IRequest<MultiGetRequestParameters> p,SerializableData<IMultiGetRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MgetGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MgetGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.MgetGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Mget<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Mget<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Mget<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Mget", p, new [] { GET, POST }, "/_mget", "/{index}/_mget", "/{index}/{type}/_mget");
		}
		
		internal Task<TResponse> MgetDispatchAsync<TResponse>(IRequest<MultiGetRequestParameters> p,SerializableData<IMultiGetRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MgetGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MgetGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.MgetGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MgetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MgetAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.MgetAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Mget", p, new [] { GET, POST }, "/_mget", "/{index}/_mget", "/{index}/{type}/_mget");
		}
		
		internal TResponse MsearchDispatch<TResponse>(IRequest<MultiSearchRequestParameters> p,SerializableData<IMultiSearchRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.MsearchGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Msearch<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Msearch<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Msearch<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Msearch", p, new [] { GET, POST }, "/_msearch", "/{index}/_msearch", "/{index}/{type}/_msearch");
		}
		
		internal Task<TResponse> MsearchDispatchAsync<TResponse>(IRequest<MultiSearchRequestParameters> p,SerializableData<IMultiSearchRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.MsearchGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.MsearchAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Msearch", p, new [] { GET, POST }, "/_msearch", "/{index}/_msearch", "/{index}/{type}/_msearch");
		}
		
		internal TResponse MsearchTemplateDispatch<TResponse>(IRequest<MultiSearchTemplateRequestParameters> p,SerializableData<IMultiSearchTemplateRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchTemplateGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchTemplateGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.MsearchTemplateGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchTemplate<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchTemplate<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.MsearchTemplate<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("MsearchTemplate", p, new [] { GET, POST }, "/_msearch/template", "/{index}/_msearch/template", "/{index}/{type}/_msearch/template");
		}
		
		internal Task<TResponse> MsearchTemplateDispatchAsync<TResponse>(IRequest<MultiSearchTemplateRequestParameters> p,SerializableData<IMultiSearchTemplateRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchTemplateGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchTemplateGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.MsearchTemplateGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MsearchTemplateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MsearchTemplateAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.MsearchTemplateAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("MsearchTemplate", p, new [] { GET, POST }, "/_msearch/template", "/{index}/_msearch/template", "/{index}/{type}/_msearch/template");
		}
		
		internal TResponse MtermvectorsDispatch<TResponse>(IRequest<MultiTermVectorsRequestParameters> p,SerializableData<IMultiTermVectorsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MtermvectorsGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MtermvectorsGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.MtermvectorsGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Mtermvectors<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Mtermvectors<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Mtermvectors<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Mtermvectors", p, new [] { GET, POST }, "/_mtermvectors", "/{index}/_mtermvectors", "/{index}/{type}/_mtermvectors");
		}
		
		internal Task<TResponse> MtermvectorsDispatchAsync<TResponse>(IRequest<MultiTermVectorsRequestParameters> p,SerializableData<IMultiTermVectorsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MtermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MtermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.MtermvectorsGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.MtermvectorsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.MtermvectorsAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.MtermvectorsAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Mtermvectors", p, new [] { GET, POST }, "/_mtermvectors", "/{index}/_mtermvectors", "/{index}/{type}/_mtermvectors");
		}
		
		internal TResponse NodesHotThreadsDispatch<TResponse>(IRequest<NodesHotThreadsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesHotThreads<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
						return _lowLevel.NodesHotThreadsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("NodesHotThreads", p, new [] { GET }, "/_cluster/nodes/hotthreads", "/_cluster/nodes/hot_threads", "/_cluster/nodes/{node_id}/hotthreads", "/_cluster/nodes/{node_id}/hot_threads", "/_nodes/hotthreads", "/_nodes/hot_threads", "/_nodes/{node_id}/hotthreads", "/_nodes/{node_id}/hot_threads");
		}
		
		internal Task<TResponse> NodesHotThreadsDispatchAsync<TResponse>(IRequest<NodesHotThreadsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesHotThreadsAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
						return _lowLevel.NodesHotThreadsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("NodesHotThreads", p, new [] { GET }, "/_cluster/nodes/hotthreads", "/_cluster/nodes/hot_threads", "/_cluster/nodes/{node_id}/hotthreads", "/_cluster/nodes/{node_id}/hot_threads", "/_nodes/hotthreads", "/_nodes/hot_threads", "/_nodes/{node_id}/hotthreads", "/_nodes/{node_id}/hot_threads");
		}
		
		internal TResponse NodesInfoDispatch<TResponse>(IRequest<NodesInfoRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesInfo<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesInfo<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesInfoForAll<TResponse>(p.RouteValues.Metric,p.RequestParameters);
						return _lowLevel.NodesInfoForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("NodesInfo", p, new [] { GET }, "/_nodes", "/_nodes/{node_id}", "/_nodes/{metric}", "/_nodes/{node_id}/{metric}");
		}
		
		internal Task<TResponse> NodesInfoDispatchAsync<TResponse>(IRequest<NodesInfoRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesInfoAsync<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesInfoAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesInfoForAllAsync<TResponse>(p.RouteValues.Metric,p.RequestParameters,ct);
						return _lowLevel.NodesInfoForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("NodesInfo", p, new [] { GET }, "/_nodes", "/_nodes/{node_id}", "/_nodes/{metric}", "/_nodes/{node_id}/{metric}");
		}
		
		internal TResponse NodesReloadSecureSettingsDispatch<TResponse>(IRequest<ReloadSecureSettingsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesReloadSecureSettings<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
						return _lowLevel.NodesReloadSecureSettingsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("NodesReloadSecureSettings", p, new [] { POST }, "/_nodes/reload_secure_settings", "/_nodes/{node_id}/reload_secure_settings");
		}
		
		internal Task<TResponse> NodesReloadSecureSettingsDispatchAsync<TResponse>(IRequest<ReloadSecureSettingsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesReloadSecureSettingsAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
						return _lowLevel.NodesReloadSecureSettingsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("NodesReloadSecureSettings", p, new [] { POST }, "/_nodes/reload_secure_settings", "/_nodes/{node_id}/reload_secure_settings");
		}
		
		internal TResponse NodesStatsDispatch<TResponse>(IRequest<NodesStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric, p.RouteValues.IndexMetric)) return _lowLevel.NodesStats<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RouteValues.IndexMetric,p.RequestParameters);
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesStats<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric, p.RouteValues.IndexMetric)) return _lowLevel.NodesStatsForAll<TResponse>(p.RouteValues.Metric,p.RouteValues.IndexMetric,p.RequestParameters);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesStats<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesStatsForAll<TResponse>(p.RouteValues.Metric,p.RequestParameters);
						return _lowLevel.NodesStatsForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("NodesStats", p, new [] { GET }, "/_nodes/stats", "/_nodes/{node_id}/stats", "/_nodes/stats/{metric}", "/_nodes/{node_id}/stats/{metric}", "/_nodes/stats/{metric}/{index_metric}", "/_nodes/{node_id}/stats/{metric}/{index_metric}");
		}
		
		internal Task<TResponse> NodesStatsDispatchAsync<TResponse>(IRequest<NodesStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric, p.RouteValues.IndexMetric)) return _lowLevel.NodesStatsAsync<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RouteValues.IndexMetric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesStatsAsync<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric, p.RouteValues.IndexMetric)) return _lowLevel.NodesStatsForAllAsync<TResponse>(p.RouteValues.Metric,p.RouteValues.IndexMetric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesStatsAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesStatsForAllAsync<TResponse>(p.RouteValues.Metric,p.RequestParameters,ct);
						return _lowLevel.NodesStatsForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("NodesStats", p, new [] { GET }, "/_nodes/stats", "/_nodes/{node_id}/stats", "/_nodes/stats/{metric}", "/_nodes/{node_id}/stats/{metric}", "/_nodes/stats/{metric}/{index_metric}", "/_nodes/{node_id}/stats/{metric}/{index_metric}");
		}
		
		internal TResponse NodesUsageDispatch<TResponse>(IRequest<NodesUsageRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesUsage<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesUsage<TResponse>(p.RouteValues.NodeId,p.RequestParameters);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesUsageForAll<TResponse>(p.RouteValues.Metric,p.RequestParameters);
						return _lowLevel.NodesUsageForAll<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("NodesUsage", p, new [] { GET }, "/_nodes/usage", "/_nodes/{node_id}/usage", "/_nodes/usage/{metric}", "/_nodes/{node_id}/usage/{metric}");
		}
		
		internal Task<TResponse> NodesUsageDispatchAsync<TResponse>(IRequest<NodesUsageRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.NodeId, p.RouteValues.Metric)) return _lowLevel.NodesUsageAsync<TResponse>(p.RouteValues.NodeId,p.RouteValues.Metric,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.NodeId)) return _lowLevel.NodesUsageAsync<TResponse>(p.RouteValues.NodeId,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Metric)) return _lowLevel.NodesUsageForAllAsync<TResponse>(p.RouteValues.Metric,p.RequestParameters,ct);
						return _lowLevel.NodesUsageForAllAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("NodesUsage", p, new [] { GET }, "/_nodes/usage", "/_nodes/{node_id}/usage", "/_nodes/usage/{metric}", "/_nodes/{node_id}/usage/{metric}");
		}
		
		internal TResponse PingDispatch<TResponse>(IRequest<PingRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
						return _lowLevel.Ping<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("Ping", p, new [] { HEAD }, "/");
		}
		
		internal Task<TResponse> PingDispatchAsync<TResponse>(IRequest<PingRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case HEAD:
						return _lowLevel.PingAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("Ping", p, new [] { HEAD }, "/");
		}
		
		internal TResponse PutScriptDispatch<TResponse>(IRequest<PutScriptRequestParameters> p,SerializableData<IPutScriptRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Id, p.RouteValues.Context)) return _lowLevel.PutScript<TResponse>(p.RouteValues.Id,p.RouteValues.Context,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.PutScript<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Id, p.RouteValues.Context)) return _lowLevel.PutScriptPost<TResponse>(p.RouteValues.Id,p.RouteValues.Context,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.PutScriptPost<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("PutScript", p, new [] { PUT, POST }, "/_scripts/{id}", "/_scripts/{id}/{context}");
		}
		
		internal Task<TResponse> PutScriptDispatchAsync<TResponse>(IRequest<PutScriptRequestParameters> p,SerializableData<IPutScriptRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Id, p.RouteValues.Context)) return _lowLevel.PutScriptAsync<TResponse>(p.RouteValues.Id,p.RouteValues.Context,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.PutScriptAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Id, p.RouteValues.Context)) return _lowLevel.PutScriptPostAsync<TResponse>(p.RouteValues.Id,p.RouteValues.Context,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.PutScriptPostAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("PutScript", p, new [] { PUT, POST }, "/_scripts/{id}", "/_scripts/{id}/{context}");
		}
		
		internal TResponse ReindexDispatch<TResponse>(IRequest<ReindexOnServerRequestParameters> p,SerializableData<IReindexOnServerRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.Reindex<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Reindex", p, new [] { POST }, "/_reindex");
		}
		
		internal Task<TResponse> ReindexDispatchAsync<TResponse>(IRequest<ReindexOnServerRequestParameters> p,SerializableData<IReindexOnServerRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.ReindexAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Reindex", p, new [] { POST }, "/_reindex");
		}
		
		internal TResponse ReindexRethrottleDispatch<TResponse>(IRequest<ReindexRethrottleRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.TaskId)) return _lowLevel.ReindexRethrottle<TResponse>(p.RouteValues.TaskId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("ReindexRethrottle", p, new [] { POST }, "/_reindex/{task_id}/_rethrottle");
		}
		
		internal Task<TResponse> ReindexRethrottleDispatchAsync<TResponse>(IRequest<ReindexRethrottleRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.TaskId)) return _lowLevel.ReindexRethrottleAsync<TResponse>(p.RouteValues.TaskId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("ReindexRethrottle", p, new [] { POST }, "/_reindex/{task_id}/_rethrottle");
		}
		
		internal TResponse RenderSearchTemplateDispatch<TResponse>(IRequest<RenderSearchTemplateRequestParameters> p,SerializableData<IRenderSearchTemplateRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.RenderSearchTemplateGet<TResponse>(p.RouteValues.Id,p.RequestParameters);
						return _lowLevel.RenderSearchTemplateGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.RenderSearchTemplate<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
						return _lowLevel.RenderSearchTemplate<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("RenderSearchTemplate", p, new [] { GET, POST }, "/_render/template", "/_render/template/{id}");
		}
		
		internal Task<TResponse> RenderSearchTemplateDispatchAsync<TResponse>(IRequest<RenderSearchTemplateRequestParameters> p,SerializableData<IRenderSearchTemplateRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.RenderSearchTemplateGetAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
						return _lowLevel.RenderSearchTemplateGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.RenderSearchTemplateAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
						return _lowLevel.RenderSearchTemplateAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("RenderSearchTemplate", p, new [] { GET, POST }, "/_render/template", "/_render/template/{id}");
		}
		
		internal TResponse ScriptsPainlessExecuteDispatch<TResponse>(IRequest<ExecutePainlessScriptRequestParameters> p,SerializableData<IExecutePainlessScriptRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ScriptsPainlessExecuteGet<TResponse>(p.RequestParameters);
				case POST:
						return _lowLevel.ScriptsPainlessExecute<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("ScriptsPainlessExecute", p, new [] { GET, POST }, "/_scripts/painless/_execute");
		}
		
		internal Task<TResponse> ScriptsPainlessExecuteDispatchAsync<TResponse>(IRequest<ExecutePainlessScriptRequestParameters> p,SerializableData<IExecutePainlessScriptRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ScriptsPainlessExecuteGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
						return _lowLevel.ScriptsPainlessExecuteAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("ScriptsPainlessExecute", p, new [] { GET, POST }, "/_scripts/painless/_execute");
		}
		
		internal TResponse ScrollDispatch<TResponse>(IRequest<ScrollRequestParameters> p,SerializableData<IScrollRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ScrollGet<TResponse>(p.RequestParameters);
				case POST:
						return _lowLevel.Scroll<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Scroll", p, new [] { GET, POST }, "/_search/scroll");
		}
		
		internal Task<TResponse> ScrollDispatchAsync<TResponse>(IRequest<ScrollRequestParameters> p,SerializableData<IScrollRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.ScrollGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
						return _lowLevel.ScrollAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Scroll", p, new [] { GET, POST }, "/_search/scroll");
		}
		
		internal TResponse SearchDispatch<TResponse>(IRequest<SearchRequestParameters> p,SerializableData<ISearchRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.SearchGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Search<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.Search<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.Search<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("Search", p, new [] { GET, POST }, "/_search", "/{index}/_search", "/{index}/{type}/_search");
		}
		
		internal Task<TResponse> SearchDispatchAsync<TResponse>(IRequest<SearchRequestParameters> p,SerializableData<ISearchRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.SearchGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.SearchAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("Search", p, new [] { GET, POST }, "/_search", "/{index}/_search", "/{index}/{type}/_search");
		}
		
		internal TResponse SearchShardsDispatch<TResponse>(IRequest<SearchShardsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchShardsGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.SearchShardsGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchShards<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.SearchShards<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SearchShards", p, new [] { GET, POST }, "/_search_shards", "/{index}/_search_shards");
		}
		
		internal Task<TResponse> SearchShardsDispatchAsync<TResponse>(IRequest<SearchShardsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchShardsGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.SearchShardsGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchShardsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.SearchShardsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SearchShards", p, new [] { GET, POST }, "/_search_shards", "/{index}/_search_shards");
		}
		
		internal TResponse SearchTemplateDispatch<TResponse>(IRequest<SearchTemplateRequestParameters> p,SerializableData<ISearchTemplateRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchTemplateGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchTemplateGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.SearchTemplateGet<TResponse>(p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchTemplate<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchTemplate<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
						return _lowLevel.SearchTemplate<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SearchTemplate", p, new [] { GET, POST }, "/_search/template", "/{index}/_search/template", "/{index}/{type}/_search/template");
		}
		
		internal Task<TResponse> SearchTemplateDispatchAsync<TResponse>(IRequest<SearchTemplateRequestParameters> p,SerializableData<ISearchTemplateRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchTemplateGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchTemplateGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.SearchTemplateGetAsync<TResponse>(p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.SearchTemplateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index)) return _lowLevel.SearchTemplateAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
						return _lowLevel.SearchTemplateAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SearchTemplate", p, new [] { GET, POST }, "/_search/template", "/{index}/_search/template", "/{index}/{type}/_search/template");
		}
		
		internal TResponse SnapshotCreateDispatch<TResponse>(IRequest<SnapshotRequestParameters> p,SerializableData<ISnapshotRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotCreate<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotCreatePost<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotCreate", p, new [] { PUT, POST }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal Task<TResponse> SnapshotCreateDispatchAsync<TResponse>(IRequest<SnapshotRequestParameters> p,SerializableData<ISnapshotRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotCreateAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotCreatePostAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotCreate", p, new [] { PUT, POST }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal TResponse SnapshotCreateRepositoryDispatch<TResponse>(IRequest<CreateRepositoryRequestParameters> p,SerializableData<ICreateRepositoryRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotCreateRepository<TResponse>(p.RouteValues.Repository,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotCreateRepositoryPost<TResponse>(p.RouteValues.Repository,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotCreateRepository", p, new [] { PUT, POST }, "/_snapshot/{repository}");
		}
		
		internal Task<TResponse> SnapshotCreateRepositoryDispatchAsync<TResponse>(IRequest<CreateRepositoryRequestParameters> p,SerializableData<ICreateRepositoryRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotCreateRepositoryAsync<TResponse>(p.RouteValues.Repository,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotCreateRepositoryPostAsync<TResponse>(p.RouteValues.Repository,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotCreateRepository", p, new [] { PUT, POST }, "/_snapshot/{repository}");
		}
		
		internal TResponse SnapshotDeleteDispatch<TResponse>(IRequest<DeleteSnapshotRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotDelete<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotDelete", p, new [] { DELETE }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal Task<TResponse> SnapshotDeleteDispatchAsync<TResponse>(IRequest<DeleteSnapshotRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotDeleteAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotDelete", p, new [] { DELETE }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal TResponse SnapshotDeleteRepositoryDispatch<TResponse>(IRequest<DeleteRepositoryRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotDeleteRepository<TResponse>(p.RouteValues.Repository,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotDeleteRepository", p, new [] { DELETE }, "/_snapshot/{repository}");
		}
		
		internal Task<TResponse> SnapshotDeleteRepositoryDispatchAsync<TResponse>(IRequest<DeleteRepositoryRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotDeleteRepositoryAsync<TResponse>(p.RouteValues.Repository,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotDeleteRepository", p, new [] { DELETE }, "/_snapshot/{repository}");
		}
		
		internal TResponse SnapshotGetDispatch<TResponse>(IRequest<GetSnapshotRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotGet<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotGet", p, new [] { GET }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal Task<TResponse> SnapshotGetDispatchAsync<TResponse>(IRequest<GetSnapshotRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotGetAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotGet", p, new [] { GET }, "/_snapshot/{repository}/{snapshot}");
		}
		
		internal TResponse SnapshotGetRepositoryDispatch<TResponse>(IRequest<GetRepositoryRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.SnapshotGetRepository<TResponse>(p.RouteValues.Repository,p.RequestParameters);
						return _lowLevel.SnapshotGetRepository<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SnapshotGetRepository", p, new [] { GET }, "/_snapshot", "/_snapshot/{repository}");
		}
		
		internal Task<TResponse> SnapshotGetRepositoryDispatchAsync<TResponse>(IRequest<GetRepositoryRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.SnapshotGetRepositoryAsync<TResponse>(p.RouteValues.Repository,p.RequestParameters,ct);
						return _lowLevel.SnapshotGetRepositoryAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SnapshotGetRepository", p, new [] { GET }, "/_snapshot", "/_snapshot/{repository}");
		}
		
		internal TResponse SnapshotRestoreDispatch<TResponse>(IRequest<RestoreRequestParameters> p,SerializableData<IRestoreRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotRestore<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotRestore", p, new [] { POST }, "/_snapshot/{repository}/{snapshot}/_restore");
		}
		
		internal Task<TResponse> SnapshotRestoreDispatchAsync<TResponse>(IRequest<RestoreRequestParameters> p,SerializableData<IRestoreRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotRestoreAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotRestore", p, new [] { POST }, "/_snapshot/{repository}/{snapshot}/_restore");
		}
		
		internal TResponse SnapshotStatusDispatch<TResponse>(IRequest<SnapshotStatusRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotStatus<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters);
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.SnapshotStatus<TResponse>(p.RouteValues.Repository,p.RequestParameters);
						return _lowLevel.SnapshotStatus<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SnapshotStatus", p, new [] { GET }, "/_snapshot/_status", "/_snapshot/{repository}/_status", "/_snapshot/{repository}/{snapshot}/_status");
		}
		
		internal Task<TResponse> SnapshotStatusDispatchAsync<TResponse>(IRequest<SnapshotStatusRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Repository, p.RouteValues.Snapshot)) return _lowLevel.SnapshotStatusAsync<TResponse>(p.RouteValues.Repository,p.RouteValues.Snapshot,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Repository)) return _lowLevel.SnapshotStatusAsync<TResponse>(p.RouteValues.Repository,p.RequestParameters,ct);
						return _lowLevel.SnapshotStatusAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SnapshotStatus", p, new [] { GET }, "/_snapshot/_status", "/_snapshot/{repository}/_status", "/_snapshot/{repository}/{snapshot}/_status");
		}
		
		internal TResponse SnapshotVerifyRepositoryDispatch<TResponse>(IRequest<VerifyRepositoryRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotVerifyRepository<TResponse>(p.RouteValues.Repository,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SnapshotVerifyRepository", p, new [] { POST }, "/_snapshot/{repository}/_verify");
		}
		
		internal Task<TResponse> SnapshotVerifyRepositoryDispatchAsync<TResponse>(IRequest<VerifyRepositoryRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Repository)) return _lowLevel.SnapshotVerifyRepositoryAsync<TResponse>(p.RouteValues.Repository,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SnapshotVerifyRepository", p, new [] { POST }, "/_snapshot/{repository}/_verify");
		}
		
		internal TResponse TasksCancelDispatch<TResponse>(IRequest<CancelTasksRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.TaskId)) return _lowLevel.TasksCancel<TResponse>(p.RouteValues.TaskId,p.RequestParameters);
						return _lowLevel.TasksCancel<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("TasksCancel", p, new [] { POST }, "/_tasks/_cancel", "/_tasks/{task_id}/_cancel");
		}
		
		internal Task<TResponse> TasksCancelDispatchAsync<TResponse>(IRequest<CancelTasksRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.TaskId)) return _lowLevel.TasksCancelAsync<TResponse>(p.RouteValues.TaskId,p.RequestParameters,ct);
						return _lowLevel.TasksCancelAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("TasksCancel", p, new [] { POST }, "/_tasks/_cancel", "/_tasks/{task_id}/_cancel");
		}
		
		internal TResponse TasksGetDispatch<TResponse>(IRequest<GetTaskRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.TaskId)) return _lowLevel.TasksGet<TResponse>(p.RouteValues.TaskId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("TasksGet", p, new [] { GET }, "/_tasks/{task_id}");
		}
		
		internal Task<TResponse> TasksGetDispatchAsync<TResponse>(IRequest<GetTaskRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.TaskId)) return _lowLevel.TasksGetAsync<TResponse>(p.RouteValues.TaskId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("TasksGet", p, new [] { GET }, "/_tasks/{task_id}");
		}
		
		internal TResponse TasksListDispatch<TResponse>(IRequest<ListTasksRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.TasksList<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("TasksList", p, new [] { GET }, "/_tasks");
		}
		
		internal Task<TResponse> TasksListDispatchAsync<TResponse>(IRequest<ListTasksRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.TasksListAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("TasksList", p, new [] { GET }, "/_tasks");
		}
		
		internal TResponse TermvectorsDispatch<TResponse,TDocument>(IRequest<TermVectorsRequestParameters> p,SerializableData<ITermVectorsRequest<TDocument>> body) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.TermvectorsGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.TermvectorsGet<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.TermvectorsGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.TermvectorsGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Termvectors<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Termvectors<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.Termvectors<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.Termvectors<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Termvectors", p, new [] { GET, POST }, "/{index}/_termvectors/{id}", "/{index}/_termvectors/", "/{index}/{type}/{id}/_termvectors", "/{index}/{type}/_termvectors");
		}
		
		internal Task<TResponse> TermvectorsDispatchAsync<TResponse,TDocument>(IRequest<TermVectorsRequestParameters> p,SerializableData<ITermVectorsRequest<TDocument>> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new() where TDocument : class
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.TermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.TermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.TermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.TermvectorsGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.TermvectorsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.TermvectorsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.TermvectorsAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.TermvectorsAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Termvectors", p, new [] { GET, POST }, "/{index}/_termvectors/{id}", "/{index}/_termvectors/", "/{index}/{type}/{id}/_termvectors", "/{index}/{type}/_termvectors");
		}
		
		internal TResponse UpdateDispatch<TResponse,TDocument,TPartialDocument>(IRequest<UpdateRequestParameters> p,SerializableData<IUpdateRequest<TDocument, TPartialDocument>> body) where TResponse : class, IElasticsearchResponse, new() where TDocument : class where TPartialDocument : class
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.Update<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.Update<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("Update", p, new [] { POST }, "/{index}/_update/{id}", "/{index}/{type}/{id}/_update");
		}
		
		internal Task<TResponse> UpdateDispatchAsync<TResponse,TDocument,TPartialDocument>(IRequest<UpdateRequestParameters> p,SerializableData<IUpdateRequest<TDocument, TPartialDocument>> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new() where TDocument : class where TPartialDocument : class
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type, p.RouteValues.Id)) return _lowLevel.UpdateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RouteValues.Id,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index, p.RouteValues.Id)) return _lowLevel.UpdateAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("Update", p, new [] { POST }, "/{index}/_update/{id}", "/{index}/{type}/{id}/_update");
		}
		
		internal TResponse UpdateByQueryDispatch<TResponse>(IRequest<UpdateByQueryRequestParameters> p,SerializableData<IUpdateByQueryRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.UpdateByQuery<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.UpdateByQuery<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("UpdateByQuery", p, new [] { POST }, "/{index}/_update_by_query", "/{index}/{type}/_update_by_query");
		}
		
		internal Task<TResponse> UpdateByQueryDispatchAsync<TResponse>(IRequest<UpdateByQueryRequestParameters> p,SerializableData<IUpdateByQueryRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.UpdateByQueryAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.UpdateByQueryAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("UpdateByQuery", p, new [] { POST }, "/{index}/_update_by_query", "/{index}/{type}/_update_by_query");
		}
		
		internal TResponse XpackGraphExploreDispatch<TResponse>(IRequest<GraphExploreRequestParameters> p,SerializableData<IGraphExploreRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackGraphExploreGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackGraphExploreGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackGraphExplore<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackGraphExplore<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackGraphExplore", p, new [] { GET, POST }, "/{index}/_graph/explore", "/{index}/{type}/_graph/explore");
		}
		
		internal Task<TResponse> XpackGraphExploreDispatchAsync<TResponse>(IRequest<GraphExploreRequestParameters> p,SerializableData<IGraphExploreRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackGraphExploreGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackGraphExploreGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackGraphExploreAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackGraphExploreAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackGraphExplore", p, new [] { GET, POST }, "/{index}/_graph/explore", "/{index}/{type}/_graph/explore");
		}
		
		internal TResponse XpackInfoDispatch<TResponse>(IRequest<XPackInfoRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackInfo<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackInfo", p, new [] { GET }, "/_xpack");
		}
		
		internal Task<TResponse> XpackInfoDispatchAsync<TResponse>(IRequest<XPackInfoRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackInfoAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackInfo", p, new [] { GET }, "/_xpack");
		}
		
		internal TResponse XpackUsageDispatch<TResponse>(IRequest<XPackUsageRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackUsage<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackUsage", p, new [] { GET }, "/_xpack/usage");
		}
		
		internal Task<TResponse> XpackUsageDispatchAsync<TResponse>(IRequest<XPackUsageRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackUsageAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackUsage", p, new [] { GET }, "/_xpack/usage");
		}
		
		internal TResponse XpackLicenseDeleteDispatch<TResponse>(IRequest<DeleteLicenseRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.XpackLicenseDelete<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicenseDelete", p, new [] { DELETE }, "/_license");
		}
		
		internal Task<TResponse> XpackLicenseDeleteDispatchAsync<TResponse>(IRequest<DeleteLicenseRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.XpackLicenseDeleteAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicenseDelete", p, new [] { DELETE }, "/_license");
		}
		
		internal TResponse XpackLicenseGetDispatch<TResponse>(IRequest<GetLicenseRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGet<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicenseGet", p, new [] { GET }, "/_license");
		}
		
		internal Task<TResponse> XpackLicenseGetDispatchAsync<TResponse>(IRequest<GetLicenseRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGetAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicenseGet", p, new [] { GET }, "/_license");
		}
		
		internal TResponse XpackLicenseGetBasicStatusDispatch<TResponse>(IRequest<GetBasicLicenseStatusRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGetBasicStatus<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicenseGetBasicStatus", p, new [] { GET }, "/_license/basic_status");
		}
		
		internal Task<TResponse> XpackLicenseGetBasicStatusDispatchAsync<TResponse>(IRequest<GetBasicLicenseStatusRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGetBasicStatusAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicenseGetBasicStatus", p, new [] { GET }, "/_license/basic_status");
		}
		
		internal TResponse XpackLicenseGetTrialStatusDispatch<TResponse>(IRequest<GetTrialLicenseStatusRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGetTrialStatus<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicenseGetTrialStatus", p, new [] { GET }, "/_license/trial_status");
		}
		
		internal Task<TResponse> XpackLicenseGetTrialStatusDispatchAsync<TResponse>(IRequest<GetTrialLicenseStatusRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.XpackLicenseGetTrialStatusAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicenseGetTrialStatus", p, new [] { GET }, "/_license/trial_status");
		}
		
		internal TResponse XpackLicensePostDispatch<TResponse>(IRequest<PostLicenseRequestParameters> p,SerializableData<IPostLicenseRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.XpackLicensePost<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicensePost", p, new [] { PUT }, "/_license");
		}
		
		internal Task<TResponse> XpackLicensePostDispatchAsync<TResponse>(IRequest<PostLicenseRequestParameters> p,SerializableData<IPostLicenseRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.XpackLicensePostAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicensePost", p, new [] { PUT }, "/_license");
		}
		
		internal TResponse XpackLicensePostStartBasicDispatch<TResponse>(IRequest<StartBasicLicenseRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackLicensePostStartBasic<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicensePostStartBasic", p, new [] { POST }, "/_license/start_basic");
		}
		
		internal Task<TResponse> XpackLicensePostStartBasicDispatchAsync<TResponse>(IRequest<StartBasicLicenseRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackLicensePostStartBasicAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicensePostStartBasic", p, new [] { POST }, "/_license/start_basic");
		}
		
		internal TResponse XpackLicensePostStartTrialDispatch<TResponse>(IRequest<StartTrialLicenseRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackLicensePostStartTrial<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackLicensePostStartTrial", p, new [] { POST }, "/_license/start_trial");
		}
		
		internal Task<TResponse> XpackLicensePostStartTrialDispatchAsync<TResponse>(IRequest<StartTrialLicenseRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackLicensePostStartTrialAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackLicensePostStartTrial", p, new [] { POST }, "/_license/start_trial");
		}
		
		internal TResponse MlCloseJobDispatch<TResponse>(IRequest<MlCloseJobRequestParameters> p,SerializableData<IMlCloseJobRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlCloseJob<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlCloseJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_close");
		}
		
		internal Task<TResponse> MlCloseJobDispatchAsync<TResponse>(IRequest<MlCloseJobRequestParameters> p,SerializableData<IMlCloseJobRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlCloseJobAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlCloseJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_close");
		}
		
		internal TResponse MlDeleteDatafeedDispatch<TResponse>(IRequest<MlDeleteDatafeedRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlDeleteDatafeed<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlDeleteDatafeed", p, new [] { DELETE }, "/_ml/datafeeds/{datafeed_id}");
		}
		
		internal Task<TResponse> MlDeleteDatafeedDispatchAsync<TResponse>(IRequest<MlDeleteDatafeedRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlDeleteDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlDeleteDatafeed", p, new [] { DELETE }, "/_ml/datafeeds/{datafeed_id}");
		}
		
		internal TResponse MlDeleteExpiredDataDispatch<TResponse>(IRequest<MlDeleteExpiredDataRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.MlDeleteExpiredData<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlDeleteExpiredData", p, new [] { DELETE }, "/_ml/_delete_expired_data");
		}
		
		internal Task<TResponse> MlDeleteExpiredDataDispatchAsync<TResponse>(IRequest<MlDeleteExpiredDataRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.MlDeleteExpiredDataAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlDeleteExpiredData", p, new [] { DELETE }, "/_ml/_delete_expired_data");
		}
		
		internal TResponse MlDeleteFilterDispatch<TResponse>(IRequest<MlDeleteFilterRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.FilterId)) return _lowLevel.MlDeleteFilter<TResponse>(p.RouteValues.FilterId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlDeleteFilter", p, new [] { DELETE }, "/_ml/filters/{filter_id}");
		}
		
		internal Task<TResponse> MlDeleteFilterDispatchAsync<TResponse>(IRequest<MlDeleteFilterRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.FilterId)) return _lowLevel.MlDeleteFilterAsync<TResponse>(p.RouteValues.FilterId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlDeleteFilter", p, new [] { DELETE }, "/_ml/filters/{filter_id}");
		}
		
		internal TResponse MlDeleteJobDispatch<TResponse>(IRequest<MlDeleteJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlDeleteJob<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlDeleteJob", p, new [] { DELETE }, "/_ml/anomaly_detectors/{job_id}");
		}
		
		internal Task<TResponse> MlDeleteJobDispatchAsync<TResponse>(IRequest<MlDeleteJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlDeleteJobAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlDeleteJob", p, new [] { DELETE }, "/_ml/anomaly_detectors/{job_id}");
		}
		
		internal TResponse MlDeleteModelSnapshotDispatch<TResponse>(IRequest<MlDeleteModelSnapshotRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlDeleteModelSnapshot<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlDeleteModelSnapshot", p, new [] { DELETE }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}");
		}
		
		internal Task<TResponse> MlDeleteModelSnapshotDispatchAsync<TResponse>(IRequest<MlDeleteModelSnapshotRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlDeleteModelSnapshotAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlDeleteModelSnapshot", p, new [] { DELETE }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}");
		}
		
		internal TResponse MlFlushJobDispatch<TResponse>(IRequest<MlFlushJobRequestParameters> p,SerializableData<IMlFlushJobRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlFlushJob<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlFlushJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_flush");
		}
		
		internal Task<TResponse> MlFlushJobDispatchAsync<TResponse>(IRequest<MlFlushJobRequestParameters> p,SerializableData<IMlFlushJobRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlFlushJobAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlFlushJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_flush");
		}
		
		internal TResponse MlForecastDispatch<TResponse>(IRequest<MlForecastRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlForecast<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlForecast", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_forecast");
		}
		
		internal Task<TResponse> MlForecastDispatchAsync<TResponse>(IRequest<MlForecastRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlForecastAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlForecast", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_forecast");
		}
		
		internal TResponse MlGetBucketsDispatch<TResponse>(IRequest<MlGetBucketsRequestParameters> p,SerializableData<IMlGetBucketsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.Timestamp)) return _lowLevel.MlGetBuckets<TResponse>(p.RouteValues.JobId,p.RouteValues.Timestamp,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetBuckets<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.Timestamp)) return _lowLevel.MlGetBuckets<TResponse>(p.RouteValues.JobId,p.RouteValues.Timestamp,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetBuckets<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetBuckets", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/buckets/{timestamp}", "/_ml/anomaly_detectors/{job_id}/results/buckets");
		}
		
		internal Task<TResponse> MlGetBucketsDispatchAsync<TResponse>(IRequest<MlGetBucketsRequestParameters> p,SerializableData<IMlGetBucketsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.Timestamp)) return _lowLevel.MlGetBucketsAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.Timestamp,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetBucketsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.Timestamp)) return _lowLevel.MlGetBucketsAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.Timestamp,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetBucketsAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetBuckets", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/buckets/{timestamp}", "/_ml/anomaly_detectors/{job_id}/results/buckets");
		}
		
		internal TResponse MlGetCategoriesDispatch<TResponse>(IRequest<MlGetCategoriesRequestParameters> p,SerializableData<IMlGetCategoriesRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.CategoryId)) return _lowLevel.MlGetCategories<TResponse>(p.RouteValues.JobId,long.Parse(p.RouteValues.CategoryId),p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetCategories<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.CategoryId)) return _lowLevel.MlGetCategories<TResponse>(p.RouteValues.JobId,long.Parse(p.RouteValues.CategoryId),body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetCategories<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetCategories", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/categories/{category_id}", "/_ml/anomaly_detectors/{job_id}/results/categories/");
		}
		
		internal Task<TResponse> MlGetCategoriesDispatchAsync<TResponse>(IRequest<MlGetCategoriesRequestParameters> p,SerializableData<IMlGetCategoriesRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.CategoryId)) return _lowLevel.MlGetCategoriesAsync<TResponse>(p.RouteValues.JobId,long.Parse(p.RouteValues.CategoryId),p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetCategoriesAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.CategoryId)) return _lowLevel.MlGetCategoriesAsync<TResponse>(p.RouteValues.JobId,long.Parse(p.RouteValues.CategoryId),body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetCategoriesAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetCategories", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/categories/{category_id}", "/_ml/anomaly_detectors/{job_id}/results/categories/");
		}
		
		internal TResponse MlGetDatafeedsDispatch<TResponse>(IRequest<MlGetDatafeedsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.DatafeedId)) return _lowLevel.MlGetDatafeeds<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters);
						return _lowLevel.MlGetDatafeeds<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlGetDatafeeds", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}", "/_ml/datafeeds");
		}
		
		internal Task<TResponse> MlGetDatafeedsDispatchAsync<TResponse>(IRequest<MlGetDatafeedsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.DatafeedId)) return _lowLevel.MlGetDatafeedsAsync<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters,ct);
						return _lowLevel.MlGetDatafeedsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlGetDatafeeds", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}", "/_ml/datafeeds");
		}
		
		internal TResponse MlGetDatafeedStatsDispatch<TResponse>(IRequest<MlGetDatafeedStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.DatafeedId)) return _lowLevel.MlGetDatafeedStats<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters);
						return _lowLevel.MlGetDatafeedStats<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlGetDatafeedStats", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}/_stats", "/_ml/datafeeds/_stats");
		}
		
		internal Task<TResponse> MlGetDatafeedStatsDispatchAsync<TResponse>(IRequest<MlGetDatafeedStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.DatafeedId)) return _lowLevel.MlGetDatafeedStatsAsync<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters,ct);
						return _lowLevel.MlGetDatafeedStatsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlGetDatafeedStats", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}/_stats", "/_ml/datafeeds/_stats");
		}
		
		internal TResponse MlGetFiltersDispatch<TResponse>(IRequest<MlGetFiltersRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.FilterId)) return _lowLevel.MlGetFilters<TResponse>(p.RouteValues.FilterId,p.RequestParameters);
						return _lowLevel.MlGetFilters<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlGetFilters", p, new [] { GET }, "/_ml/filters", "/_ml/filters/{filter_id}");
		}
		
		internal Task<TResponse> MlGetFiltersDispatchAsync<TResponse>(IRequest<MlGetFiltersRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.FilterId)) return _lowLevel.MlGetFiltersAsync<TResponse>(p.RouteValues.FilterId,p.RequestParameters,ct);
						return _lowLevel.MlGetFiltersAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlGetFilters", p, new [] { GET }, "/_ml/filters", "/_ml/filters/{filter_id}");
		}
		
		internal TResponse MlGetInfluencersDispatch<TResponse>(IRequest<MlGetInfluencersRequestParameters> p,SerializableData<IMlGetInfluencersRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetInfluencers<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetInfluencers<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetInfluencers", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/influencers");
		}
		
		internal Task<TResponse> MlGetInfluencersDispatchAsync<TResponse>(IRequest<MlGetInfluencersRequestParameters> p,SerializableData<IMlGetInfluencersRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetInfluencersAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetInfluencersAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetInfluencers", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/influencers");
		}
		
		internal TResponse MlGetJobsDispatch<TResponse>(IRequest<MlGetJobsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId)) return _lowLevel.MlGetJobs<TResponse>(p.RouteValues.JobId,p.RequestParameters);
						return _lowLevel.MlGetJobs<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlGetJobs", p, new [] { GET }, "/_ml/anomaly_detectors/{job_id}", "/_ml/anomaly_detectors");
		}
		
		internal Task<TResponse> MlGetJobsDispatchAsync<TResponse>(IRequest<MlGetJobsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId)) return _lowLevel.MlGetJobsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
						return _lowLevel.MlGetJobsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlGetJobs", p, new [] { GET }, "/_ml/anomaly_detectors/{job_id}", "/_ml/anomaly_detectors");
		}
		
		internal TResponse MlGetJobStatsDispatch<TResponse>(IRequest<MlGetJobStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId)) return _lowLevel.MlGetJobStats<TResponse>(p.RouteValues.JobId,p.RequestParameters);
						return _lowLevel.MlGetJobStats<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlGetJobStats", p, new [] { GET }, "/_ml/anomaly_detectors/_stats", "/_ml/anomaly_detectors/{job_id}/_stats");
		}
		
		internal Task<TResponse> MlGetJobStatsDispatchAsync<TResponse>(IRequest<MlGetJobStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId)) return _lowLevel.MlGetJobStatsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
						return _lowLevel.MlGetJobStatsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlGetJobStats", p, new [] { GET }, "/_ml/anomaly_detectors/_stats", "/_ml/anomaly_detectors/{job_id}/_stats");
		}
		
		internal TResponse MlGetModelSnapshotsDispatch<TResponse>(IRequest<MlGetModelSnapshotsRequestParameters> p,SerializableData<IMlGetModelSnapshotsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlGetModelSnapshots<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetModelSnapshots<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlGetModelSnapshots<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetModelSnapshots<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetModelSnapshots", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}", "/_ml/anomaly_detectors/{job_id}/model_snapshots");
		}
		
		internal Task<TResponse> MlGetModelSnapshotsDispatchAsync<TResponse>(IRequest<MlGetModelSnapshotsRequestParameters> p,SerializableData<IMlGetModelSnapshotsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlGetModelSnapshotsAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetModelSnapshotsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlGetModelSnapshotsAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetModelSnapshotsAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetModelSnapshots", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}", "/_ml/anomaly_detectors/{job_id}/model_snapshots");
		}
		
		internal TResponse MlGetOverallBucketsDispatch<TResponse>(IRequest<MlGetOverallBucketsRequestParameters> p,SerializableData<IMlGetOverallBucketsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetOverallBuckets<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetOverallBuckets<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetOverallBuckets", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/overall_buckets");
		}
		
		internal Task<TResponse> MlGetOverallBucketsDispatchAsync<TResponse>(IRequest<MlGetOverallBucketsRequestParameters> p,SerializableData<IMlGetOverallBucketsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetOverallBucketsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetOverallBucketsAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetOverallBuckets", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/overall_buckets");
		}
		
		internal TResponse MlGetRecordsDispatch<TResponse>(IRequest<MlGetRecordsRequestParameters> p,SerializableData<IMlGetRecordsRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetRecords<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetRecords<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlGetRecords", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/records");
		}
		
		internal Task<TResponse> MlGetRecordsDispatchAsync<TResponse>(IRequest<MlGetRecordsRequestParameters> p,SerializableData<IMlGetRecordsRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetRecordsAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlGetRecordsAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlGetRecords", p, new [] { GET, POST }, "/_ml/anomaly_detectors/{job_id}/results/records");
		}
		
		internal TResponse MlOpenJobDispatch<TResponse>(IRequest<MlOpenJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlOpenJob<TResponse>(p.RouteValues.JobId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlOpenJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_open");
		}
		
		internal Task<TResponse> MlOpenJobDispatchAsync<TResponse>(IRequest<MlOpenJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlOpenJobAsync<TResponse>(p.RouteValues.JobId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlOpenJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_open");
		}
		
		internal TResponse MlPostDataDispatch<TResponse>(IRequest<MlPostDataRequestParameters> p,SerializableData<IMlPostDataRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlPostData<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlPostData", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_data");
		}
		
		internal Task<TResponse> MlPostDataDispatchAsync<TResponse>(IRequest<MlPostDataRequestParameters> p,SerializableData<IMlPostDataRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlPostDataAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlPostData", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_data");
		}
		
		internal TResponse MlPreviewDatafeedDispatch<TResponse>(IRequest<MlPreviewDatafeedRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlPreviewDatafeed<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlPreviewDatafeed", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}/_preview");
		}
		
		internal Task<TResponse> MlPreviewDatafeedDispatchAsync<TResponse>(IRequest<MlPreviewDatafeedRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlPreviewDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlPreviewDatafeed", p, new [] { GET }, "/_ml/datafeeds/{datafeed_id}/_preview");
		}
		
		internal TResponse MlPutDatafeedDispatch<TResponse>(IRequest<MlPutDatafeedRequestParameters> p,SerializableData<IMlPutDatafeedRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlPutDatafeed<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlPutDatafeed", p, new [] { PUT }, "/_ml/datafeeds/{datafeed_id}");
		}
		
		internal Task<TResponse> MlPutDatafeedDispatchAsync<TResponse>(IRequest<MlPutDatafeedRequestParameters> p,SerializableData<IMlPutDatafeedRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlPutDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlPutDatafeed", p, new [] { PUT }, "/_ml/datafeeds/{datafeed_id}");
		}
		
		internal TResponse MlPutFilterDispatch<TResponse>(IRequest<MlPutFilterRequestParameters> p,SerializableData<IMlPutFilterRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.FilterId)) return _lowLevel.MlPutFilter<TResponse>(p.RouteValues.FilterId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlPutFilter", p, new [] { PUT }, "/_ml/filters/{filter_id}");
		}
		
		internal Task<TResponse> MlPutFilterDispatchAsync<TResponse>(IRequest<MlPutFilterRequestParameters> p,SerializableData<IMlPutFilterRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.FilterId)) return _lowLevel.MlPutFilterAsync<TResponse>(p.RouteValues.FilterId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlPutFilter", p, new [] { PUT }, "/_ml/filters/{filter_id}");
		}
		
		internal TResponse MlPutJobDispatch<TResponse>(IRequest<MlPutJobRequestParameters> p,SerializableData<IMlPutJobRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlPutJob<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlPutJob", p, new [] { PUT }, "/_ml/anomaly_detectors/{job_id}");
		}
		
		internal Task<TResponse> MlPutJobDispatchAsync<TResponse>(IRequest<MlPutJobRequestParameters> p,SerializableData<IMlPutJobRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlPutJobAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlPutJob", p, new [] { PUT }, "/_ml/anomaly_detectors/{job_id}");
		}
		
		internal TResponse MlRevertModelSnapshotDispatch<TResponse>(IRequest<MlRevertModelSnapshotRequestParameters> p,SerializableData<IMlRevertModelSnapshotRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlRevertModelSnapshot<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlRevertModelSnapshot", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_revert");
		}
		
		internal Task<TResponse> MlRevertModelSnapshotDispatchAsync<TResponse>(IRequest<MlRevertModelSnapshotRequestParameters> p,SerializableData<IMlRevertModelSnapshotRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlRevertModelSnapshotAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlRevertModelSnapshot", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_revert");
		}
		
		internal TResponse MlSetUpgradeModeDispatch<TResponse>(IRequest<MlSetUpgradeModeRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.MlSetUpgradeMode<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("MlSetUpgradeMode", p, new [] { POST }, "/_ml/set_upgrade_mode");
		}
		
		internal Task<TResponse> MlSetUpgradeModeDispatchAsync<TResponse>(IRequest<MlSetUpgradeModeRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.MlSetUpgradeModeAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlSetUpgradeMode", p, new [] { POST }, "/_ml/set_upgrade_mode");
		}
		
		internal TResponse MlStartDatafeedDispatch<TResponse>(IRequest<MlStartDatafeedRequestParameters> p,SerializableData<IMlStartDatafeedRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlStartDatafeed<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlStartDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_start");
		}
		
		internal Task<TResponse> MlStartDatafeedDispatchAsync<TResponse>(IRequest<MlStartDatafeedRequestParameters> p,SerializableData<IMlStartDatafeedRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlStartDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlStartDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_start");
		}
		
		internal TResponse MlStopDatafeedDispatch<TResponse>(IRequest<MlStopDatafeedRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlStopDatafeed<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlStopDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_stop");
		}
		
		internal Task<TResponse> MlStopDatafeedDispatchAsync<TResponse>(IRequest<MlStopDatafeedRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlStopDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlStopDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_stop");
		}
		
		internal TResponse MlUpdateDatafeedDispatch<TResponse>(IRequest<MlUpdateDatafeedRequestParameters> p,SerializableData<IMlUpdateDatafeedRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlUpdateDatafeed<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlUpdateDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_update");
		}
		
		internal Task<TResponse> MlUpdateDatafeedDispatchAsync<TResponse>(IRequest<MlUpdateDatafeedRequestParameters> p,SerializableData<IMlUpdateDatafeedRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.DatafeedId)) return _lowLevel.MlUpdateDatafeedAsync<TResponse>(p.RouteValues.DatafeedId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlUpdateDatafeed", p, new [] { POST }, "/_ml/datafeeds/{datafeed_id}/_update");
		}
		
		internal TResponse MlUpdateJobDispatch<TResponse>(IRequest<MlUpdateJobRequestParameters> p,SerializableData<IMlUpdateJobRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlUpdateJob<TResponse>(p.RouteValues.JobId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlUpdateJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_update");
		}
		
		internal Task<TResponse> MlUpdateJobDispatchAsync<TResponse>(IRequest<MlUpdateJobRequestParameters> p,SerializableData<IMlUpdateJobRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId)) return _lowLevel.MlUpdateJobAsync<TResponse>(p.RouteValues.JobId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlUpdateJob", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/_update");
		}
		
		internal TResponse MlUpdateModelSnapshotDispatch<TResponse>(IRequest<MlUpdateModelSnapshotRequestParameters> p,SerializableData<IMlUpdateModelSnapshotRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlUpdateModelSnapshot<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("MlUpdateModelSnapshot", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_update");
		}
		
		internal Task<TResponse> MlUpdateModelSnapshotDispatchAsync<TResponse>(IRequest<MlUpdateModelSnapshotRequestParameters> p,SerializableData<IMlUpdateModelSnapshotRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.JobId, p.RouteValues.SnapshotId)) return _lowLevel.MlUpdateModelSnapshotAsync<TResponse>(p.RouteValues.JobId,p.RouteValues.SnapshotId,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("MlUpdateModelSnapshot", p, new [] { POST }, "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_update");
		}
		
		internal TResponse MlValidateDispatch<TResponse>(IRequest<MlValidateRequestParameters> p,SerializableData<IMlValidateRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.MlValidate<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("MlValidate", p, new [] { POST }, "/_ml/anomaly_detectors/_validate");
		}
		
		internal Task<TResponse> MlValidateDispatchAsync<TResponse>(IRequest<MlValidateRequestParameters> p,SerializableData<IMlValidateRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.MlValidateAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("MlValidate", p, new [] { POST }, "/_ml/anomaly_detectors/_validate");
		}
		
		internal TResponse XpackMigrationDeprecationsDispatch<TResponse>(IRequest<DeprecationInfoRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.XpackMigrationDeprecations<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.XpackMigrationDeprecations<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackMigrationDeprecations", p, new [] { GET }, "/_migration/deprecations", "/{index}/_migration/deprecations");
		}
		
		internal Task<TResponse> XpackMigrationDeprecationsDispatchAsync<TResponse>(IRequest<DeprecationInfoRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.XpackMigrationDeprecationsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.XpackMigrationDeprecationsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackMigrationDeprecations", p, new [] { GET }, "/_migration/deprecations", "/{index}/_migration/deprecations");
		}
		
		internal TResponse XpackMigrationGetAssistanceDispatch<TResponse>(IRequest<MigrationAssistanceRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.XpackMigrationGetAssistance<TResponse>(p.RouteValues.Index,p.RequestParameters);
						return _lowLevel.XpackMigrationGetAssistance<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackMigrationGetAssistance", p, new [] { GET }, "/_migration/assistance", "/_migration/assistance/{index}");
		}
		
		internal Task<TResponse> XpackMigrationGetAssistanceDispatchAsync<TResponse>(IRequest<MigrationAssistanceRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index)) return _lowLevel.XpackMigrationGetAssistanceAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
						return _lowLevel.XpackMigrationGetAssistanceAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackMigrationGetAssistance", p, new [] { GET }, "/_migration/assistance", "/_migration/assistance/{index}");
		}
		
		internal TResponse XpackMigrationUpgradeDispatch<TResponse>(IRequest<MigrationUpgradeRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackMigrationUpgrade<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackMigrationUpgrade", p, new [] { POST }, "/_migration/upgrade/{index}");
		}
		
		internal Task<TResponse> XpackMigrationUpgradeDispatchAsync<TResponse>(IRequest<MigrationUpgradeRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackMigrationUpgradeAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackMigrationUpgrade", p, new [] { POST }, "/_migration/upgrade/{index}");
		}
		
		internal TResponse XpackRollupDeleteJobDispatch<TResponse>(IRequest<DeleteRollupJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupDeleteJob<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupDeleteJob", p, new [] { DELETE }, "/_rollup/job/{id}");
		}
		
		internal Task<TResponse> XpackRollupDeleteJobDispatchAsync<TResponse>(IRequest<DeleteRollupJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupDeleteJobAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupDeleteJob", p, new [] { DELETE }, "/_rollup/job/{id}");
		}
		
		internal TResponse XpackRollupGetJobsDispatch<TResponse>(IRequest<GetRollupJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackRollupGetJobs<TResponse>(p.RouteValues.Id,p.RequestParameters);
						return _lowLevel.XpackRollupGetJobs<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackRollupGetJobs", p, new [] { GET }, "/_rollup/job/{id}", "/_rollup/job/");
		}
		
		internal Task<TResponse> XpackRollupGetJobsDispatchAsync<TResponse>(IRequest<GetRollupJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackRollupGetJobsAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
						return _lowLevel.XpackRollupGetJobsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackRollupGetJobs", p, new [] { GET }, "/_rollup/job/{id}", "/_rollup/job/");
		}
		
		internal TResponse XpackRollupGetRollupCapsDispatch<TResponse>(IRequest<GetRollupCapabilitiesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackRollupGetRollupCaps<TResponse>(p.RouteValues.Id,p.RequestParameters);
						return _lowLevel.XpackRollupGetRollupCaps<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackRollupGetRollupCaps", p, new [] { GET }, "/_rollup/data/{id}", "/_rollup/data/");
		}
		
		internal Task<TResponse> XpackRollupGetRollupCapsDispatchAsync<TResponse>(IRequest<GetRollupCapabilitiesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackRollupGetRollupCapsAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
						return _lowLevel.XpackRollupGetRollupCapsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackRollupGetRollupCaps", p, new [] { GET }, "/_rollup/data/{id}", "/_rollup/data/");
		}
		
		internal TResponse XpackRollupGetRollupIndexCapsDispatch<TResponse>(IRequest<GetRollupIndexCapabilitiesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupGetRollupIndexCaps<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupGetRollupIndexCaps", p, new [] { GET }, "/{index}/_rollup/data");
		}
		
		internal Task<TResponse> XpackRollupGetRollupIndexCapsDispatchAsync<TResponse>(IRequest<GetRollupIndexCapabilitiesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupGetRollupIndexCapsAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupGetRollupIndexCaps", p, new [] { GET }, "/{index}/_rollup/data");
		}
		
		internal TResponse XpackRollupPutJobDispatch<TResponse>(IRequest<CreateRollupJobRequestParameters> p,SerializableData<ICreateRollupJobRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupPutJob<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupPutJob", p, new [] { PUT }, "/_rollup/job/{id}");
		}
		
		internal Task<TResponse> XpackRollupPutJobDispatchAsync<TResponse>(IRequest<CreateRollupJobRequestParameters> p,SerializableData<ICreateRollupJobRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupPutJobAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupPutJob", p, new [] { PUT }, "/_rollup/job/{id}");
		}
		
		internal TResponse XpackRollupRollupSearchDispatch<TResponse>(IRequest<RollupSearchRequestParameters> p,SerializableData<IRollupSearchRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackRollupRollupSearchGet<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupRollupSearchGet<TResponse>(p.RouteValues.Index,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackRollupRollupSearch<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupRollupSearch<TResponse>(p.RouteValues.Index,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupRollupSearch", p, new [] { GET, POST }, "/{index}/_rollup_search", "/{index}/{type}/_rollup_search");
		}
		
		internal Task<TResponse> XpackRollupRollupSearchDispatchAsync<TResponse>(IRequest<RollupSearchRequestParameters> p,SerializableData<IRollupSearchRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackRollupRollupSearchGetAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupRollupSearchGetAsync<TResponse>(p.RouteValues.Index,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Index, p.RouteValues.Type)) return _lowLevel.XpackRollupRollupSearchAsync<TResponse>(p.RouteValues.Index,p.RouteValues.Type,body,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.Index)) return _lowLevel.XpackRollupRollupSearchAsync<TResponse>(p.RouteValues.Index,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupRollupSearch", p, new [] { GET, POST }, "/{index}/_rollup_search", "/{index}/{type}/_rollup_search");
		}
		
		internal TResponse XpackRollupStartJobDispatch<TResponse>(IRequest<StartRollupJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupStartJob<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupStartJob", p, new [] { POST }, "/_rollup/job/{id}/_start");
		}
		
		internal Task<TResponse> XpackRollupStartJobDispatchAsync<TResponse>(IRequest<StartRollupJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupStartJobAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupStartJob", p, new [] { POST }, "/_rollup/job/{id}/_start");
		}
		
		internal TResponse XpackRollupStopJobDispatch<TResponse>(IRequest<StopRollupJobRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupStopJob<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackRollupStopJob", p, new [] { POST }, "/_rollup/job/{id}/_stop");
		}
		
		internal Task<TResponse> XpackRollupStopJobDispatchAsync<TResponse>(IRequest<StopRollupJobRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackRollupStopJobAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackRollupStopJob", p, new [] { POST }, "/_rollup/job/{id}/_stop");
		}
		
		internal TResponse SecurityAuthenticateDispatch<TResponse>(IRequest<SecurityAuthenticateRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SecurityAuthenticate<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SecurityAuthenticate", p, new [] { GET }, "/_security/_authenticate");
		}
		
		internal Task<TResponse> SecurityAuthenticateDispatchAsync<TResponse>(IRequest<SecurityAuthenticateRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SecurityAuthenticateAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityAuthenticate", p, new [] { GET }, "/_security/_authenticate");
		}
		
		internal TResponse SecurityChangePasswordDispatch<TResponse>(IRequest<SecurityChangePasswordRequestParameters> p,SerializableData<ISecurityChangePasswordRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityChangePassword<TResponse>(p.RouteValues.Username,body,p.RequestParameters);
						return _lowLevel.SecurityChangePassword<TResponse>(body,p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityChangePasswordPost<TResponse>(p.RouteValues.Username,body,p.RequestParameters);
						return _lowLevel.SecurityChangePasswordPost<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SecurityChangePassword", p, new [] { PUT, POST }, "/_security/user/{username}/_password", "/_security/user/_password");
		}
		
		internal Task<TResponse> SecurityChangePasswordDispatchAsync<TResponse>(IRequest<SecurityChangePasswordRequestParameters> p,SerializableData<ISecurityChangePasswordRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityChangePasswordAsync<TResponse>(p.RouteValues.Username,body,p.RequestParameters,ct);
						return _lowLevel.SecurityChangePasswordAsync<TResponse>(body,p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityChangePasswordPostAsync<TResponse>(p.RouteValues.Username,body,p.RequestParameters,ct);
						return _lowLevel.SecurityChangePasswordPostAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityChangePassword", p, new [] { PUT, POST }, "/_security/user/{username}/_password", "/_security/user/_password");
		}
		
		internal TResponse SecurityClearCachedRealmsDispatch<TResponse>(IRequest<SecurityClearCachedRealmsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Realms)) return _lowLevel.SecurityClearCachedRealms<TResponse>(p.RouteValues.Realms,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityClearCachedRealms", p, new [] { POST }, "/_security/realm/{realms}/_clear_cache");
		}
		
		internal Task<TResponse> SecurityClearCachedRealmsDispatchAsync<TResponse>(IRequest<SecurityClearCachedRealmsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Realms)) return _lowLevel.SecurityClearCachedRealmsAsync<TResponse>(p.RouteValues.Realms,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityClearCachedRealms", p, new [] { POST }, "/_security/realm/{realms}/_clear_cache");
		}
		
		internal TResponse SecurityClearCachedRolesDispatch<TResponse>(IRequest<SecurityClearCachedRolesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityClearCachedRoles<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityClearCachedRoles", p, new [] { POST }, "/_security/role/{name}/_clear_cache");
		}
		
		internal Task<TResponse> SecurityClearCachedRolesDispatchAsync<TResponse>(IRequest<SecurityClearCachedRolesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityClearCachedRolesAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityClearCachedRoles", p, new [] { POST }, "/_security/role/{name}/_clear_cache");
		}
		
		internal TResponse SecurityCreateApiKeyDispatch<TResponse>(IRequest<SecurityCreateApiKeyRequestParameters> p,SerializableData<ISecurityCreateApiKeyRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.SecurityCreateApiKey<TResponse>(body,p.RequestParameters);
				case POST:
						return _lowLevel.SecurityCreateApiKeyPost<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SecurityCreateApiKey", p, new [] { PUT, POST }, "/_security/api_key");
		}
		
		internal Task<TResponse> SecurityCreateApiKeyDispatchAsync<TResponse>(IRequest<SecurityCreateApiKeyRequestParameters> p,SerializableData<ISecurityCreateApiKeyRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
						return _lowLevel.SecurityCreateApiKeyAsync<TResponse>(body,p.RequestParameters,ct);
				case POST:
						return _lowLevel.SecurityCreateApiKeyPostAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityCreateApiKey", p, new [] { PUT, POST }, "/_security/api_key");
		}
		
		internal TResponse SecurityDeleteRoleDispatch<TResponse>(IRequest<SecurityDeleteRoleRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityDeleteRole<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityDeleteRole", p, new [] { DELETE }, "/_security/role/{name}");
		}
		
		internal Task<TResponse> SecurityDeleteRoleDispatchAsync<TResponse>(IRequest<SecurityDeleteRoleRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityDeleteRoleAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityDeleteRole", p, new [] { DELETE }, "/_security/role/{name}");
		}
		
		internal TResponse SecurityDeleteRoleMappingDispatch<TResponse>(IRequest<SecurityDeleteRoleMappingRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityDeleteRoleMapping<TResponse>(p.RouteValues.Name,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityDeleteRoleMapping", p, new [] { DELETE }, "/_security/role_mapping/{name}");
		}
		
		internal Task<TResponse> SecurityDeleteRoleMappingDispatchAsync<TResponse>(IRequest<SecurityDeleteRoleMappingRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityDeleteRoleMappingAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityDeleteRoleMapping", p, new [] { DELETE }, "/_security/role_mapping/{name}");
		}
		
		internal TResponse SecurityDeleteUserDispatch<TResponse>(IRequest<SecurityDeleteUserRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityDeleteUser<TResponse>(p.RouteValues.Username,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityDeleteUser", p, new [] { DELETE }, "/_security/user/{username}");
		}
		
		internal Task<TResponse> SecurityDeleteUserDispatchAsync<TResponse>(IRequest<SecurityDeleteUserRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityDeleteUserAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityDeleteUser", p, new [] { DELETE }, "/_security/user/{username}");
		}
		
		internal TResponse SecurityDisableUserDispatch<TResponse>(IRequest<SecurityDisableUserRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityDisableUser<TResponse>(p.RouteValues.Username,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityDisableUserPost<TResponse>(p.RouteValues.Username,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityDisableUser", p, new [] { PUT, POST }, "/_security/user/{username}/_disable");
		}
		
		internal Task<TResponse> SecurityDisableUserDispatchAsync<TResponse>(IRequest<SecurityDisableUserRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityDisableUserAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityDisableUserPostAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityDisableUser", p, new [] { PUT, POST }, "/_security/user/{username}/_disable");
		}
		
		internal TResponse SecurityEnableUserDispatch<TResponse>(IRequest<SecurityEnableUserRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityEnableUser<TResponse>(p.RouteValues.Username,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityEnableUserPost<TResponse>(p.RouteValues.Username,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityEnableUser", p, new [] { PUT, POST }, "/_security/user/{username}/_enable");
		}
		
		internal Task<TResponse> SecurityEnableUserDispatchAsync<TResponse>(IRequest<SecurityEnableUserRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityEnableUserAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityEnableUserPostAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityEnableUser", p, new [] { PUT, POST }, "/_security/user/{username}/_enable");
		}
		
		internal TResponse SecurityGetApiKeyDispatch<TResponse>(IRequest<SecurityGetApiKeyRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SecurityGetApiKey<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SecurityGetApiKey", p, new [] { GET }, "/_security/api_key");
		}
		
		internal Task<TResponse> SecurityGetApiKeyDispatchAsync<TResponse>(IRequest<SecurityGetApiKeyRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SecurityGetApiKeyAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityGetApiKey", p, new [] { GET }, "/_security/api_key");
		}
		
		internal TResponse SecurityGetRoleDispatch<TResponse>(IRequest<SecurityGetRoleRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.SecurityGetRole<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.SecurityGetRole<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SecurityGetRole", p, new [] { GET }, "/_security/role/{name}", "/_security/role");
		}
		
		internal Task<TResponse> SecurityGetRoleDispatchAsync<TResponse>(IRequest<SecurityGetRoleRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.SecurityGetRoleAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.SecurityGetRoleAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityGetRole", p, new [] { GET }, "/_security/role/{name}", "/_security/role");
		}
		
		internal TResponse SecurityGetRoleMappingDispatch<TResponse>(IRequest<SecurityGetRoleMappingRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.SecurityGetRoleMapping<TResponse>(p.RouteValues.Name,p.RequestParameters);
						return _lowLevel.SecurityGetRoleMapping<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SecurityGetRoleMapping", p, new [] { GET }, "/_security/role_mapping/{name}", "/_security/role_mapping");
		}
		
		internal Task<TResponse> SecurityGetRoleMappingDispatchAsync<TResponse>(IRequest<SecurityGetRoleMappingRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Name)) return _lowLevel.SecurityGetRoleMappingAsync<TResponse>(p.RouteValues.Name,p.RequestParameters,ct);
						return _lowLevel.SecurityGetRoleMappingAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityGetRoleMapping", p, new [] { GET }, "/_security/role_mapping/{name}", "/_security/role_mapping");
		}
		
		internal TResponse SecurityGetTokenDispatch<TResponse>(IRequest<SecurityGetTokenRequestParameters> p,SerializableData<ISecurityGetTokenRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.SecurityGetToken<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SecurityGetToken", p, new [] { POST }, "/_security/oauth2/token");
		}
		
		internal Task<TResponse> SecurityGetTokenDispatchAsync<TResponse>(IRequest<SecurityGetTokenRequestParameters> p,SerializableData<ISecurityGetTokenRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.SecurityGetTokenAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityGetToken", p, new [] { POST }, "/_security/oauth2/token");
		}
		
		internal TResponse SecurityGetUserDispatch<TResponse>(IRequest<SecurityGetUserRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityGetUser<TResponse>(p.RouteValues.Username,p.RequestParameters);
						return _lowLevel.SecurityGetUser<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SecurityGetUser", p, new [] { GET }, "/_security/user/{username}", "/_security/user");
		}
		
		internal Task<TResponse> SecurityGetUserDispatchAsync<TResponse>(IRequest<SecurityGetUserRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.Username)) return _lowLevel.SecurityGetUserAsync<TResponse>(p.RouteValues.Username,p.RequestParameters,ct);
						return _lowLevel.SecurityGetUserAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityGetUser", p, new [] { GET }, "/_security/user/{username}", "/_security/user");
		}
		
		internal TResponse SecurityInvalidateApiKeyDispatch<TResponse>(IRequest<SecurityInvalidateApiKeyRequestParameters> p,SerializableData<ISecurityInvalidateApiKeyRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.SecurityInvalidateApiKey<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SecurityInvalidateApiKey", p, new [] { DELETE }, "/_security/api_key");
		}
		
		internal Task<TResponse> SecurityInvalidateApiKeyDispatchAsync<TResponse>(IRequest<SecurityInvalidateApiKeyRequestParameters> p,SerializableData<ISecurityInvalidateApiKeyRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.SecurityInvalidateApiKeyAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityInvalidateApiKey", p, new [] { DELETE }, "/_security/api_key");
		}
		
		internal TResponse SecurityInvalidateTokenDispatch<TResponse>(IRequest<SecurityInvalidateTokenRequestParameters> p,SerializableData<ISecurityInvalidateTokenRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.SecurityInvalidateToken<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("SecurityInvalidateToken", p, new [] { DELETE }, "/_security/oauth2/token");
		}
		
		internal Task<TResponse> SecurityInvalidateTokenDispatchAsync<TResponse>(IRequest<SecurityInvalidateTokenRequestParameters> p,SerializableData<ISecurityInvalidateTokenRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
						return _lowLevel.SecurityInvalidateTokenAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("SecurityInvalidateToken", p, new [] { DELETE }, "/_security/oauth2/token");
		}
		
		internal TResponse SecurityPutRoleDispatch<TResponse>(IRequest<SecurityPutRoleRequestParameters> p,SerializableData<ISecurityPutRoleRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRole<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRolePost<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityPutRole", p, new [] { PUT, POST }, "/_security/role/{name}");
		}
		
		internal Task<TResponse> SecurityPutRoleDispatchAsync<TResponse>(IRequest<SecurityPutRoleRequestParameters> p,SerializableData<ISecurityPutRoleRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRoleAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRolePostAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityPutRole", p, new [] { PUT, POST }, "/_security/role/{name}");
		}
		
		internal TResponse SecurityPutRoleMappingDispatch<TResponse>(IRequest<SecurityPutRoleMappingRequestParameters> p,SerializableData<ISecurityPutRoleMappingRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRoleMapping<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRoleMappingPost<TResponse>(p.RouteValues.Name,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityPutRoleMapping", p, new [] { PUT, POST }, "/_security/role_mapping/{name}");
		}
		
		internal Task<TResponse> SecurityPutRoleMappingDispatchAsync<TResponse>(IRequest<SecurityPutRoleMappingRequestParameters> p,SerializableData<ISecurityPutRoleMappingRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRoleMappingAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Name)) return _lowLevel.SecurityPutRoleMappingPostAsync<TResponse>(p.RouteValues.Name,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityPutRoleMapping", p, new [] { PUT, POST }, "/_security/role_mapping/{name}");
		}
		
		internal TResponse SecurityPutUserDispatch<TResponse>(IRequest<SecurityPutUserRequestParameters> p,SerializableData<ISecurityPutUserRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityPutUser<TResponse>(p.RouteValues.Username,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityPutUserPost<TResponse>(p.RouteValues.Username,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("SecurityPutUser", p, new [] { PUT, POST }, "/_security/user/{username}");
		}
		
		internal Task<TResponse> SecurityPutUserDispatchAsync<TResponse>(IRequest<SecurityPutUserRequestParameters> p,SerializableData<ISecurityPutUserRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityPutUserAsync<TResponse>(p.RouteValues.Username,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Username)) return _lowLevel.SecurityPutUserPostAsync<TResponse>(p.RouteValues.Username,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("SecurityPutUser", p, new [] { PUT, POST }, "/_security/user/{username}");
		}
		
		internal TResponse XpackSqlClearCursorDispatch<TResponse>(IRequest<ClearSqlCursorRequestParameters> p,SerializableData<IClearSqlCursorRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlClearCursor<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("XpackSqlClearCursor", p, new [] { POST }, "/_sql/close");
		}
		
		internal Task<TResponse> XpackSqlClearCursorDispatchAsync<TResponse>(IRequest<ClearSqlCursorRequestParameters> p,SerializableData<IClearSqlCursorRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlClearCursorAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackSqlClearCursor", p, new [] { POST }, "/_sql/close");
		}
		
		internal TResponse XpackSqlQueryDispatch<TResponse>(IRequest<QuerySqlRequestParameters> p,SerializableData<IQuerySqlRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlQuery<TResponse>(body,p.RequestParameters);
				case GET:
						return _lowLevel.XpackSqlQueryGet<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackSqlQuery", p, new [] { POST, GET }, "/_sql");
		}
		
		internal Task<TResponse> XpackSqlQueryDispatchAsync<TResponse>(IRequest<QuerySqlRequestParameters> p,SerializableData<IQuerySqlRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlQueryAsync<TResponse>(body,p.RequestParameters,ct);
				case GET:
						return _lowLevel.XpackSqlQueryGetAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackSqlQuery", p, new [] { POST, GET }, "/_sql");
		}
		
		internal TResponse XpackSqlTranslateDispatch<TResponse>(IRequest<TranslateSqlRequestParameters> p,SerializableData<ITranslateSqlRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlTranslate<TResponse>(body,p.RequestParameters);
				case GET:
						return _lowLevel.XpackSqlTranslateGet<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackSqlTranslate", p, new [] { POST, GET }, "/_sql/translate");
		}
		
		internal Task<TResponse> XpackSqlTranslateDispatchAsync<TResponse>(IRequest<TranslateSqlRequestParameters> p,SerializableData<ITranslateSqlRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackSqlTranslateAsync<TResponse>(body,p.RequestParameters,ct);
				case GET:
						return _lowLevel.XpackSqlTranslateGetAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackSqlTranslate", p, new [] { POST, GET }, "/_sql/translate");
		}
		
		internal TResponse SslCertificatesDispatch<TResponse>(IRequest<SslCertificatesRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SslCertificates<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("SslCertificates", p, new [] { GET }, "/_ssl/certificates");
		}
		
		internal Task<TResponse> SslCertificatesDispatchAsync<TResponse>(IRequest<SslCertificatesRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
						return _lowLevel.SslCertificatesAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("SslCertificates", p, new [] { GET }, "/_ssl/certificates");
		}
		
		internal TResponse XpackWatcherAckWatchDispatch<TResponse>(IRequest<AcknowledgeWatchRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.WatchId, p.RouteValues.ActionId)) return _lowLevel.XpackWatcherAckWatch<TResponse>(p.RouteValues.WatchId,p.RouteValues.ActionId,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherAckWatch<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
				case POST:
					if (AllSet(p.RouteValues.WatchId, p.RouteValues.ActionId)) return _lowLevel.XpackWatcherAckWatchPost<TResponse>(p.RouteValues.WatchId,p.RouteValues.ActionId,p.RequestParameters);
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherAckWatchPost<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherAckWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_ack", "/_watcher/watch/{watch_id}/_ack/{action_id}");
		}
		
		internal Task<TResponse> XpackWatcherAckWatchDispatchAsync<TResponse>(IRequest<AcknowledgeWatchRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.WatchId, p.RouteValues.ActionId)) return _lowLevel.XpackWatcherAckWatchAsync<TResponse>(p.RouteValues.WatchId,p.RouteValues.ActionId,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherAckWatchAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSet(p.RouteValues.WatchId, p.RouteValues.ActionId)) return _lowLevel.XpackWatcherAckWatchPostAsync<TResponse>(p.RouteValues.WatchId,p.RouteValues.ActionId,p.RequestParameters,ct);
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherAckWatchPostAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherAckWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_ack", "/_watcher/watch/{watch_id}/_ack/{action_id}");
		}
		
		internal TResponse XpackWatcherActivateWatchDispatch<TResponse>(IRequest<ActivateWatchRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherActivateWatch<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherActivateWatchPost<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherActivateWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_activate");
		}
		
		internal Task<TResponse> XpackWatcherActivateWatchDispatchAsync<TResponse>(IRequest<ActivateWatchRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherActivateWatchAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherActivateWatchPostAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherActivateWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_activate");
		}
		
		internal TResponse XpackWatcherDeactivateWatchDispatch<TResponse>(IRequest<DeactivateWatchRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherDeactivateWatch<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherDeactivateWatchPost<TResponse>(p.RouteValues.WatchId,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherDeactivateWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_deactivate");
		}
		
		internal Task<TResponse> XpackWatcherDeactivateWatchDispatchAsync<TResponse>(IRequest<DeactivateWatchRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherDeactivateWatchAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.WatchId)) return _lowLevel.XpackWatcherDeactivateWatchPostAsync<TResponse>(p.RouteValues.WatchId,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherDeactivateWatch", p, new [] { PUT, POST }, "/_watcher/watch/{watch_id}/_deactivate");
		}
		
		internal TResponse XpackWatcherDeleteWatchDispatch<TResponse>(IRequest<DeleteWatchRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherDeleteWatch<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherDeleteWatch", p, new [] { DELETE }, "/_watcher/watch/{id}");
		}
		
		internal Task<TResponse> XpackWatcherDeleteWatchDispatchAsync<TResponse>(IRequest<DeleteWatchRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case DELETE:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherDeleteWatchAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherDeleteWatch", p, new [] { DELETE }, "/_watcher/watch/{id}");
		}
		
		internal TResponse XpackWatcherExecuteWatchDispatch<TResponse>(IRequest<ExecuteWatchRequestParameters> p,SerializableData<IExecuteWatchRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackWatcherExecuteWatch<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
						return _lowLevel.XpackWatcherExecuteWatch<TResponse>(body,p.RequestParameters);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackWatcherExecuteWatchPost<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
						return _lowLevel.XpackWatcherExecuteWatchPost<TResponse>(body,p.RequestParameters);
			}
			throw InvalidDispatch("XpackWatcherExecuteWatch", p, new [] { PUT, POST }, "/_watcher/watch/{id}/_execute", "/_watcher/watch/_execute");
		}
		
		internal Task<TResponse> XpackWatcherExecuteWatchDispatchAsync<TResponse>(IRequest<ExecuteWatchRequestParameters> p,SerializableData<IExecuteWatchRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackWatcherExecuteWatchAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
						return _lowLevel.XpackWatcherExecuteWatchAsync<TResponse>(body,p.RequestParameters,ct);
				case POST:
					if (AllSet(p.RouteValues.Id)) return _lowLevel.XpackWatcherExecuteWatchPostAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
						return _lowLevel.XpackWatcherExecuteWatchPostAsync<TResponse>(body,p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackWatcherExecuteWatch", p, new [] { PUT, POST }, "/_watcher/watch/{id}/_execute", "/_watcher/watch/_execute");
		}
		
		internal TResponse XpackWatcherGetWatchDispatch<TResponse>(IRequest<GetWatchRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherGetWatch<TResponse>(p.RouteValues.Id,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherGetWatch", p, new [] { GET }, "/_watcher/watch/{id}");
		}
		
		internal Task<TResponse> XpackWatcherGetWatchDispatchAsync<TResponse>(IRequest<GetWatchRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherGetWatchAsync<TResponse>(p.RouteValues.Id,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherGetWatch", p, new [] { GET }, "/_watcher/watch/{id}");
		}
		
		internal TResponse XpackWatcherPutWatchDispatch<TResponse>(IRequest<PutWatchRequestParameters> p,SerializableData<IPutWatchRequest> body) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherPutWatch<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherPutWatchPost<TResponse>(p.RouteValues.Id,body,p.RequestParameters);
					break;
			}
			throw InvalidDispatch("XpackWatcherPutWatch", p, new [] { PUT, POST }, "/_watcher/watch/{id}");
		}
		
		internal Task<TResponse> XpackWatcherPutWatchDispatchAsync<TResponse>(IRequest<PutWatchRequestParameters> p,SerializableData<IPutWatchRequest> body, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case PUT:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherPutWatchAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
				case POST:
					if (AllSetNoFallback(p.RouteValues.Id)) return _lowLevel.XpackWatcherPutWatchPostAsync<TResponse>(p.RouteValues.Id,body,p.RequestParameters,ct);
					break;
			}
			throw InvalidDispatch("XpackWatcherPutWatch", p, new [] { PUT, POST }, "/_watcher/watch/{id}");
		}
		
		internal TResponse XpackWatcherStartDispatch<TResponse>(IRequest<StartWatcherRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackWatcherStart<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackWatcherStart", p, new [] { POST }, "/_watcher/_start");
		}
		
		internal Task<TResponse> XpackWatcherStartDispatchAsync<TResponse>(IRequest<StartWatcherRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackWatcherStartAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackWatcherStart", p, new [] { POST }, "/_watcher/_start");
		}
		
		internal TResponse XpackWatcherStatsDispatch<TResponse>(IRequest<WatcherStatsRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.WatcherStatsMetric)) return _lowLevel.XpackWatcherStats<TResponse>(p.RouteValues.WatcherStatsMetric.Value,p.RequestParameters);
						return _lowLevel.XpackWatcherStats<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackWatcherStats", p, new [] { GET }, "/_watcher/stats", "/_watcher/stats/{watcher_stats_metric}");
		}
		
		internal Task<TResponse> XpackWatcherStatsDispatchAsync<TResponse>(IRequest<WatcherStatsRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case GET:
					if (AllSet(p.RouteValues.WatcherStatsMetric)) return _lowLevel.XpackWatcherStatsAsync<TResponse>(p.RouteValues.WatcherStatsMetric.Value,p.RequestParameters,ct);
						return _lowLevel.XpackWatcherStatsAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackWatcherStats", p, new [] { GET }, "/_watcher/stats", "/_watcher/stats/{watcher_stats_metric}");
		}
		
		internal TResponse XpackWatcherStopDispatch<TResponse>(IRequest<StopWatcherRequestParameters> p) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackWatcherStop<TResponse>(p.RequestParameters);
			}
			throw InvalidDispatch("XpackWatcherStop", p, new [] { POST }, "/_watcher/_stop");
		}
		
		internal Task<TResponse> XpackWatcherStopDispatchAsync<TResponse>(IRequest<StopWatcherRequestParameters> p, CancellationToken ct) where TResponse : class, IElasticsearchResponse, new()
		{
			switch(p.HttpMethod)
			{
				case POST:
						return _lowLevel.XpackWatcherStopAsync<TResponse>(p.RequestParameters,ct);
			}
			throw InvalidDispatch("XpackWatcherStop", p, new [] { POST }, "/_watcher/_stop");
		}
			}
}
