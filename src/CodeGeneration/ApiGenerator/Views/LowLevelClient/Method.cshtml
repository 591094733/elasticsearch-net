@inherits TemplatePage<CsharpMethod>
@using System
@using System.Linq
@using System.Collections.Generic
@using RazorLight
@using ApiGenerator.Domain
@using System.Text.RegularExpressions
@{
	CsharpMethod method = Model;
	var partsNotToReplace = new HashSet<string> { "category_id" };

	var url = method.Path.Split(new[] { '/' }, 2).Last();
	// Don't replace certain url parts e.g. category_id is defined as a long parameter
	// which is .ToString()'ed as part of the URL. A .NotNull() method on long doesn't really make sense.
	var partNames = method.Url.Parts != null
		? string.Join("|", method.Url.Parts.Where(p => !partsNotToReplace.Contains(p.Name)).Select(p => p.Name))
		: @"\w+";
	var pattern = string.IsNullOrEmpty(partNames) ? @"\w+" : partNames;
	var patchedUrl = Regex.Replace(url, "{(" + pattern + ")}", "{$1.NotNull(\"$1\")}");
	bool isAsync = method.ReturnType.StartsWith("Task<");
	string requestMethod = isAsync ? "DoRequestAsync" : "DoRequest";
}
		///<summary>@method.HttpMethod on @method.Path <para>@method.OfficialDocumentationLink</para></summary>
@foreach (var part in method.Parts)
{
<text>		@Raw("///<param name=\"" + part.Name + "\">")@part.Description@Raw("</param>")
</text>
}
		@Raw(@"///<param name=""requestParameters"">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>")
		@if (!string.IsNullOrEmpty(method.ObsoleteMethodVersion))
		{
<text>		[Obsolete("Scheduled to be removed in 7.0, @method.ObsoleteMethodVersion removed this method from the rest specification")]
</text>}
		public @Raw(method.ReturnType) @(method.PerPathMethodName)@(Raw("<TResponse>"))(@Raw(method.Arguments))
			where TResponse : class, IElasticsearchResponse, new() => this.@(requestMethod)@(Raw("<TResponse>"))(@method.HttpMethod, Url($"@(Raw(patchedUrl))"), @(method.PerPathMethodName.Contains("Async") ? "ctx, " : string.Empty)@(method.Parts.Any(pp=>pp.Name == "body") ? "body" : "null"), _params(requestParameters@(Raw(url.StartsWith("_cat") ? ", contentType: \"text/plain\", accept: \"text/plain\"" : ""))));
